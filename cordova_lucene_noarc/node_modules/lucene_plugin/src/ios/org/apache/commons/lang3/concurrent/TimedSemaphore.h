//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/concurrent/TimedSemaphore.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentTimedSemaphore")
#ifdef RESTRICT_OrgApacheCommonsLang3ConcurrentTimedSemaphore
#define INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentTimedSemaphore 0
#else
#define INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentTimedSemaphore 1
#endif
#undef RESTRICT_OrgApacheCommonsLang3ConcurrentTimedSemaphore

#if !defined (OrgApacheCommonsLang3ConcurrentTimedSemaphore_) && (INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentTimedSemaphore || defined(INCLUDE_OrgApacheCommonsLang3ConcurrentTimedSemaphore))
#define OrgApacheCommonsLang3ConcurrentTimedSemaphore_

@class JavaUtilConcurrentTimeUnit;
@protocol JavaUtilConcurrentScheduledExecutorService;
@protocol JavaUtilConcurrentScheduledFuture;

@interface OrgApacheCommonsLang3ConcurrentTimedSemaphore : NSObject

#pragma mark Public

- (instancetype)initWithLong:(jlong)timePeriod
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit
                     withInt:(jint)limit;

- (instancetype)initWithJavaUtilConcurrentScheduledExecutorService:(id<JavaUtilConcurrentScheduledExecutorService>)service
                                                          withLong:(jlong)timePeriod
                                    withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit
                                                           withInt:(jint)limit;

- (void)acquire;

- (jint)getAcquireCount;

- (jint)getAvailablePermits;

- (jdouble)getAverageCallsPerPeriod;

- (jint)getLastAcquiresPerPeriod;

- (jint)getLimit;

- (jlong)getPeriod;

- (JavaUtilConcurrentTimeUnit *)getUnit;

- (jboolean)isShutdown;

- (void)setLimitWithInt:(jint)limit;

- (void)shutdown;

#pragma mark Protected

- (id<JavaUtilConcurrentScheduledExecutorService>)getExecutorService;

- (id<JavaUtilConcurrentScheduledFuture>)startTimer;

#pragma mark Package-Private

- (void)endOfPeriod;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3ConcurrentTimedSemaphore)

inline jint OrgApacheCommonsLang3ConcurrentTimedSemaphore_get_NO_LIMIT(void);
#define OrgApacheCommonsLang3ConcurrentTimedSemaphore_NO_LIMIT 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3ConcurrentTimedSemaphore, NO_LIMIT, jint)

FOUNDATION_EXPORT void OrgApacheCommonsLang3ConcurrentTimedSemaphore_initWithLong_withJavaUtilConcurrentTimeUnit_withInt_(OrgApacheCommonsLang3ConcurrentTimedSemaphore *self, jlong timePeriod, JavaUtilConcurrentTimeUnit *timeUnit, jint limit);

FOUNDATION_EXPORT OrgApacheCommonsLang3ConcurrentTimedSemaphore *new_OrgApacheCommonsLang3ConcurrentTimedSemaphore_initWithLong_withJavaUtilConcurrentTimeUnit_withInt_(jlong timePeriod, JavaUtilConcurrentTimeUnit *timeUnit, jint limit) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsLang3ConcurrentTimedSemaphore *create_OrgApacheCommonsLang3ConcurrentTimedSemaphore_initWithLong_withJavaUtilConcurrentTimeUnit_withInt_(jlong timePeriod, JavaUtilConcurrentTimeUnit *timeUnit, jint limit);

FOUNDATION_EXPORT void OrgApacheCommonsLang3ConcurrentTimedSemaphore_initWithJavaUtilConcurrentScheduledExecutorService_withLong_withJavaUtilConcurrentTimeUnit_withInt_(OrgApacheCommonsLang3ConcurrentTimedSemaphore *self, id<JavaUtilConcurrentScheduledExecutorService> service, jlong timePeriod, JavaUtilConcurrentTimeUnit *timeUnit, jint limit);

FOUNDATION_EXPORT OrgApacheCommonsLang3ConcurrentTimedSemaphore *new_OrgApacheCommonsLang3ConcurrentTimedSemaphore_initWithJavaUtilConcurrentScheduledExecutorService_withLong_withJavaUtilConcurrentTimeUnit_withInt_(id<JavaUtilConcurrentScheduledExecutorService> service, jlong timePeriod, JavaUtilConcurrentTimeUnit *timeUnit, jint limit) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsLang3ConcurrentTimedSemaphore *create_OrgApacheCommonsLang3ConcurrentTimedSemaphore_initWithJavaUtilConcurrentScheduledExecutorService_withLong_withJavaUtilConcurrentTimeUnit_withInt_(id<JavaUtilConcurrentScheduledExecutorService> service, jlong timePeriod, JavaUtilConcurrentTimeUnit *timeUnit, jint limit);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3ConcurrentTimedSemaphore)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentTimedSemaphore")
