//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-codec-1.10-sources.jar!org/apache/commons/codec/binary/Base64.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsCodecBinaryBase64")
#ifdef RESTRICT_OrgApacheCommonsCodecBinaryBase64
#define INCLUDE_ALL_OrgApacheCommonsCodecBinaryBase64 0
#else
#define INCLUDE_ALL_OrgApacheCommonsCodecBinaryBase64 1
#endif
#undef RESTRICT_OrgApacheCommonsCodecBinaryBase64

#if !defined (OrgApacheCommonsCodecBinaryBase64_) && (INCLUDE_ALL_OrgApacheCommonsCodecBinaryBase64 || defined(INCLUDE_OrgApacheCommonsCodecBinaryBase64))
#define OrgApacheCommonsCodecBinaryBase64_

#define RESTRICT_OrgApacheCommonsCodecBinaryBaseNCodec 1
#define INCLUDE_OrgApacheCommonsCodecBinaryBaseNCodec 1
#include "org/apache/commons/codec/binary/BaseNCodec.h"

@class IOSByteArray;
@class JavaMathBigInteger;
@class OrgApacheCommonsCodecBinaryBaseNCodec_Context;

@interface OrgApacheCommonsCodecBinaryBase64 : OrgApacheCommonsCodecBinaryBaseNCodec

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithBoolean:(jboolean)urlSafe;

- (instancetype)initWithInt:(jint)lineLength;

- (instancetype)initWithInt:(jint)lineLength
              withByteArray:(IOSByteArray *)lineSeparator;

- (instancetype)initWithInt:(jint)lineLength
              withByteArray:(IOSByteArray *)lineSeparator
                withBoolean:(jboolean)urlSafe;

+ (IOSByteArray *)decodeBase64WithByteArray:(IOSByteArray *)base64Data;

+ (IOSByteArray *)decodeBase64WithNSString:(NSString *)base64String;

+ (JavaMathBigInteger *)decodeIntegerWithByteArray:(IOSByteArray *)pArray;

+ (IOSByteArray *)encodeBase64WithByteArray:(IOSByteArray *)binaryData;

+ (IOSByteArray *)encodeBase64WithByteArray:(IOSByteArray *)binaryData
                                withBoolean:(jboolean)isChunked;

+ (IOSByteArray *)encodeBase64WithByteArray:(IOSByteArray *)binaryData
                                withBoolean:(jboolean)isChunked
                                withBoolean:(jboolean)urlSafe;

+ (IOSByteArray *)encodeBase64WithByteArray:(IOSByteArray *)binaryData
                                withBoolean:(jboolean)isChunked
                                withBoolean:(jboolean)urlSafe
                                    withInt:(jint)maxResultSize;

+ (IOSByteArray *)encodeBase64ChunkedWithByteArray:(IOSByteArray *)binaryData;

+ (NSString *)encodeBase64StringWithByteArray:(IOSByteArray *)binaryData;

+ (IOSByteArray *)encodeBase64URLSafeWithByteArray:(IOSByteArray *)binaryData;

+ (NSString *)encodeBase64URLSafeStringWithByteArray:(IOSByteArray *)binaryData;

+ (IOSByteArray *)encodeIntegerWithJavaMathBigInteger:(JavaMathBigInteger *)bigInt;

+ (jboolean)isArrayByteBase64WithByteArray:(IOSByteArray *)arrayOctet;

+ (jboolean)isBase64WithByte:(jbyte)octet;

+ (jboolean)isBase64WithByteArray:(IOSByteArray *)arrayOctet;

+ (jboolean)isBase64WithNSString:(NSString *)base64;

- (jboolean)isUrlSafe;

#pragma mark Protected

- (jboolean)isInAlphabetWithByte:(jbyte)octet;

#pragma mark Package-Private

- (void)decodeWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inPos
                    withInt:(jint)inAvail
withOrgApacheCommonsCodecBinaryBaseNCodec_Context:(OrgApacheCommonsCodecBinaryBaseNCodec_Context *)context;

- (void)encodeWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inPos
                    withInt:(jint)inAvail
withOrgApacheCommonsCodecBinaryBaseNCodec_Context:(OrgApacheCommonsCodecBinaryBaseNCodec_Context *)context;

+ (IOSByteArray *)toIntegerBytesWithJavaMathBigInteger:(JavaMathBigInteger *)bigInt;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithInt:(jint)arg0
                    withInt:(jint)arg1
                    withInt:(jint)arg2
                    withInt:(jint)arg3 NS_UNAVAILABLE;

- (instancetype)initWithInt:(jint)arg0
                    withInt:(jint)arg1
                    withInt:(jint)arg2
                    withInt:(jint)arg3
                   withByte:(jbyte)arg4 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsCodecBinaryBase64)

inline IOSByteArray *OrgApacheCommonsCodecBinaryBase64_get_CHUNK_SEPARATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *OrgApacheCommonsCodecBinaryBase64_CHUNK_SEPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecBinaryBase64, CHUNK_SEPARATOR, IOSByteArray *)

FOUNDATION_EXPORT void OrgApacheCommonsCodecBinaryBase64_init(OrgApacheCommonsCodecBinaryBase64 *self);

FOUNDATION_EXPORT OrgApacheCommonsCodecBinaryBase64 *new_OrgApacheCommonsCodecBinaryBase64_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsCodecBinaryBase64 *create_OrgApacheCommonsCodecBinaryBase64_init(void);

FOUNDATION_EXPORT void OrgApacheCommonsCodecBinaryBase64_initWithBoolean_(OrgApacheCommonsCodecBinaryBase64 *self, jboolean urlSafe);

FOUNDATION_EXPORT OrgApacheCommonsCodecBinaryBase64 *new_OrgApacheCommonsCodecBinaryBase64_initWithBoolean_(jboolean urlSafe) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsCodecBinaryBase64 *create_OrgApacheCommonsCodecBinaryBase64_initWithBoolean_(jboolean urlSafe);

FOUNDATION_EXPORT void OrgApacheCommonsCodecBinaryBase64_initWithInt_(OrgApacheCommonsCodecBinaryBase64 *self, jint lineLength);

FOUNDATION_EXPORT OrgApacheCommonsCodecBinaryBase64 *new_OrgApacheCommonsCodecBinaryBase64_initWithInt_(jint lineLength) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsCodecBinaryBase64 *create_OrgApacheCommonsCodecBinaryBase64_initWithInt_(jint lineLength);

FOUNDATION_EXPORT void OrgApacheCommonsCodecBinaryBase64_initWithInt_withByteArray_(OrgApacheCommonsCodecBinaryBase64 *self, jint lineLength, IOSByteArray *lineSeparator);

FOUNDATION_EXPORT OrgApacheCommonsCodecBinaryBase64 *new_OrgApacheCommonsCodecBinaryBase64_initWithInt_withByteArray_(jint lineLength, IOSByteArray *lineSeparator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsCodecBinaryBase64 *create_OrgApacheCommonsCodecBinaryBase64_initWithInt_withByteArray_(jint lineLength, IOSByteArray *lineSeparator);

FOUNDATION_EXPORT void OrgApacheCommonsCodecBinaryBase64_initWithInt_withByteArray_withBoolean_(OrgApacheCommonsCodecBinaryBase64 *self, jint lineLength, IOSByteArray *lineSeparator, jboolean urlSafe);

FOUNDATION_EXPORT OrgApacheCommonsCodecBinaryBase64 *new_OrgApacheCommonsCodecBinaryBase64_initWithInt_withByteArray_withBoolean_(jint lineLength, IOSByteArray *lineSeparator, jboolean urlSafe) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsCodecBinaryBase64 *create_OrgApacheCommonsCodecBinaryBase64_initWithInt_withByteArray_withBoolean_(jint lineLength, IOSByteArray *lineSeparator, jboolean urlSafe);

FOUNDATION_EXPORT jboolean OrgApacheCommonsCodecBinaryBase64_isArrayByteBase64WithByteArray_(IOSByteArray *arrayOctet);

FOUNDATION_EXPORT jboolean OrgApacheCommonsCodecBinaryBase64_isBase64WithByte_(jbyte octet);

FOUNDATION_EXPORT jboolean OrgApacheCommonsCodecBinaryBase64_isBase64WithNSString_(NSString *base64);

FOUNDATION_EXPORT jboolean OrgApacheCommonsCodecBinaryBase64_isBase64WithByteArray_(IOSByteArray *arrayOctet);

FOUNDATION_EXPORT IOSByteArray *OrgApacheCommonsCodecBinaryBase64_encodeBase64WithByteArray_(IOSByteArray *binaryData);

FOUNDATION_EXPORT NSString *OrgApacheCommonsCodecBinaryBase64_encodeBase64StringWithByteArray_(IOSByteArray *binaryData);

FOUNDATION_EXPORT IOSByteArray *OrgApacheCommonsCodecBinaryBase64_encodeBase64URLSafeWithByteArray_(IOSByteArray *binaryData);

FOUNDATION_EXPORT NSString *OrgApacheCommonsCodecBinaryBase64_encodeBase64URLSafeStringWithByteArray_(IOSByteArray *binaryData);

FOUNDATION_EXPORT IOSByteArray *OrgApacheCommonsCodecBinaryBase64_encodeBase64ChunkedWithByteArray_(IOSByteArray *binaryData);

FOUNDATION_EXPORT IOSByteArray *OrgApacheCommonsCodecBinaryBase64_encodeBase64WithByteArray_withBoolean_(IOSByteArray *binaryData, jboolean isChunked);

FOUNDATION_EXPORT IOSByteArray *OrgApacheCommonsCodecBinaryBase64_encodeBase64WithByteArray_withBoolean_withBoolean_(IOSByteArray *binaryData, jboolean isChunked, jboolean urlSafe);

FOUNDATION_EXPORT IOSByteArray *OrgApacheCommonsCodecBinaryBase64_encodeBase64WithByteArray_withBoolean_withBoolean_withInt_(IOSByteArray *binaryData, jboolean isChunked, jboolean urlSafe, jint maxResultSize);

FOUNDATION_EXPORT IOSByteArray *OrgApacheCommonsCodecBinaryBase64_decodeBase64WithNSString_(NSString *base64String);

FOUNDATION_EXPORT IOSByteArray *OrgApacheCommonsCodecBinaryBase64_decodeBase64WithByteArray_(IOSByteArray *base64Data);

FOUNDATION_EXPORT JavaMathBigInteger *OrgApacheCommonsCodecBinaryBase64_decodeIntegerWithByteArray_(IOSByteArray *pArray);

FOUNDATION_EXPORT IOSByteArray *OrgApacheCommonsCodecBinaryBase64_encodeIntegerWithJavaMathBigInteger_(JavaMathBigInteger *bigInt);

FOUNDATION_EXPORT IOSByteArray *OrgApacheCommonsCodecBinaryBase64_toIntegerBytesWithJavaMathBigInteger_(JavaMathBigInteger *bigInt);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsCodecBinaryBase64)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsCodecBinaryBase64")
