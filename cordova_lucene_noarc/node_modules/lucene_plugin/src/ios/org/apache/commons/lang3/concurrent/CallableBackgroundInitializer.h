//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/concurrent/CallableBackgroundInitializer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer")
#ifdef RESTRICT_OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer
#define INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer 0
#else
#define INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer 1
#endif
#undef RESTRICT_OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer

#if !defined (OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer_) && (INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer || defined(INCLUDE_OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer))
#define OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer_

#define RESTRICT_OrgApacheCommonsLang3ConcurrentBackgroundInitializer 1
#define INCLUDE_OrgApacheCommonsLang3ConcurrentBackgroundInitializer 1
#include "org/apache/commons/lang3/concurrent/BackgroundInitializer.h"

@protocol JavaUtilConcurrentCallable;
@protocol JavaUtilConcurrentExecutorService;

@interface OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer : OrgApacheCommonsLang3ConcurrentBackgroundInitializer

#pragma mark Public

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)call;

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)call
             withJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)exec;

#pragma mark Protected

- (id)initialize__ OBJC_METHOD_FAMILY_NONE;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer)

FOUNDATION_EXPORT void OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer_initWithJavaUtilConcurrentCallable_(OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer *self, id<JavaUtilConcurrentCallable> call);

FOUNDATION_EXPORT OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer *new_OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> call) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer *create_OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> call);

FOUNDATION_EXPORT void OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer_initWithJavaUtilConcurrentCallable_withJavaUtilConcurrentExecutorService_(OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer *self, id<JavaUtilConcurrentCallable> call, id<JavaUtilConcurrentExecutorService> exec);

FOUNDATION_EXPORT OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer *new_OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer_initWithJavaUtilConcurrentCallable_withJavaUtilConcurrentExecutorService_(id<JavaUtilConcurrentCallable> call, id<JavaUtilConcurrentExecutorService> exec) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer *create_OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer_initWithJavaUtilConcurrentCallable_withJavaUtilConcurrentExecutorService_(id<JavaUtilConcurrentCallable> call, id<JavaUtilConcurrentExecutorService> exec);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer")
