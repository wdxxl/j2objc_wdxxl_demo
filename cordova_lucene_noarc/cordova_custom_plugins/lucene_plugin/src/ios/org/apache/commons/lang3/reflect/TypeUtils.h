//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/reflect/TypeUtils.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsLang3ReflectTypeUtils")
#ifdef RESTRICT_OrgApacheCommonsLang3ReflectTypeUtils
#define INCLUDE_ALL_OrgApacheCommonsLang3ReflectTypeUtils 0
#else
#define INCLUDE_ALL_OrgApacheCommonsLang3ReflectTypeUtils 1
#endif
#undef RESTRICT_OrgApacheCommonsLang3ReflectTypeUtils

#if !defined (OrgApacheCommonsLang3ReflectTypeUtils_) && (INCLUDE_ALL_OrgApacheCommonsLang3ReflectTypeUtils || defined(INCLUDE_OrgApacheCommonsLang3ReflectTypeUtils))
#define OrgApacheCommonsLang3ReflectTypeUtils_

@class IOSClass;
@class IOSObjectArray;
@class OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder;
@protocol JavaLangReflectGenericArrayType;
@protocol JavaLangReflectParameterizedType;
@protocol JavaLangReflectType;
@protocol JavaLangReflectTypeVariable;
@protocol JavaLangReflectWildcardType;
@protocol JavaUtilMap;
@protocol OrgApacheCommonsLang3ReflectTyped;

@interface OrgApacheCommonsLang3ReflectTypeUtils : NSObject

#pragma mark Public

- (instancetype)init;

+ (jboolean)containsTypeVariablesWithJavaLangReflectType:(id<JavaLangReflectType>)type;

+ (id<JavaUtilMap>)determineTypeArgumentsWithIOSClass:(IOSClass *)cls
                 withJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)superType;

+ (jboolean)equalsWithJavaLangReflectType:(id<JavaLangReflectType>)t1
                  withJavaLangReflectType:(id<JavaLangReflectType>)t2;

+ (id<JavaLangReflectGenericArrayType>)genericArrayTypeWithJavaLangReflectType:(id<JavaLangReflectType>)componentType;

+ (id<JavaLangReflectType>)getArrayComponentTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type;

+ (IOSObjectArray *)getImplicitBoundsWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)typeVariable;

+ (IOSObjectArray *)getImplicitLowerBoundsWithJavaLangReflectWildcardType:(id<JavaLangReflectWildcardType>)wildcardType;

+ (IOSObjectArray *)getImplicitUpperBoundsWithJavaLangReflectWildcardType:(id<JavaLangReflectWildcardType>)wildcardType;

+ (IOSClass *)getRawTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type
                        withJavaLangReflectType:(id<JavaLangReflectType>)assigningType;

+ (id<JavaUtilMap>)getTypeArgumentsWithJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)type;

+ (id<JavaUtilMap>)getTypeArgumentsWithJavaLangReflectType:(id<JavaLangReflectType>)type
                                              withIOSClass:(IOSClass *)toClass;

+ (jboolean)isArrayTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type;

+ (jboolean)isAssignableWithJavaLangReflectType:(id<JavaLangReflectType>)type
                        withJavaLangReflectType:(id<JavaLangReflectType>)toType;

+ (jboolean)isInstanceWithId:(id)value
     withJavaLangReflectType:(id<JavaLangReflectType>)type;

+ (IOSObjectArray *)normalizeUpperBoundsWithJavaLangReflectTypeArray:(IOSObjectArray *)bounds;

+ (id<JavaLangReflectParameterizedType>)parameterizeWithIOSClass:(IOSClass *)raw
                                                 withJavaUtilMap:(id<JavaUtilMap>)typeArgMappings;

+ (id<JavaLangReflectParameterizedType>)parameterizeWithIOSClass:(IOSClass *)raw
                                    withJavaLangReflectTypeArray:(IOSObjectArray *)typeArguments;

+ (id<JavaLangReflectParameterizedType>)parameterizeWithOwnerWithJavaLangReflectType:(id<JavaLangReflectType>)owner
                                                                        withIOSClass:(IOSClass *)raw
                                                                     withJavaUtilMap:(id<JavaUtilMap>)typeArgMappings;

+ (id<JavaLangReflectParameterizedType>)parameterizeWithOwnerWithJavaLangReflectType:(id<JavaLangReflectType>)owner
                                                                        withIOSClass:(IOSClass *)raw
                                                        withJavaLangReflectTypeArray:(IOSObjectArray *)typeArguments;

+ (NSString *)toLongStringWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)var;

+ (NSString *)toStringWithJavaLangReflectType:(id<JavaLangReflectType>)type;

+ (jboolean)typesSatisfyVariablesWithJavaUtilMap:(id<JavaUtilMap>)typeVarAssigns;

+ (id<JavaLangReflectType>)unrollVariablesWithJavaUtilMap:(id<JavaUtilMap>)typeArguments
                                  withJavaLangReflectType:(id<JavaLangReflectType>)type;

+ (OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder *)wildcardType;

+ (id<OrgApacheCommonsLang3ReflectTyped>)wrapWithIOSClass:(IOSClass *)type;

+ (id<OrgApacheCommonsLang3ReflectTyped>)wrapWithJavaLangReflectType:(id<JavaLangReflectType>)type;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsLang3ReflectTypeUtils)

inline id<JavaLangReflectWildcardType> OrgApacheCommonsLang3ReflectTypeUtils_get_WILDCARD_ALL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaLangReflectWildcardType> OrgApacheCommonsLang3ReflectTypeUtils_WILDCARD_ALL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3ReflectTypeUtils, WILDCARD_ALL, id<JavaLangReflectWildcardType>)

FOUNDATION_EXPORT void OrgApacheCommonsLang3ReflectTypeUtils_init(OrgApacheCommonsLang3ReflectTypeUtils *self);

FOUNDATION_EXPORT OrgApacheCommonsLang3ReflectTypeUtils *new_OrgApacheCommonsLang3ReflectTypeUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsLang3ReflectTypeUtils *create_OrgApacheCommonsLang3ReflectTypeUtils_init(void);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectType_(id<JavaLangReflectType> type, id<JavaLangReflectType> toType);

FOUNDATION_EXPORT id<JavaUtilMap> OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithJavaLangReflectParameterizedType_(id<JavaLangReflectParameterizedType> type);

FOUNDATION_EXPORT id<JavaUtilMap> OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithJavaLangReflectType_withIOSClass_(id<JavaLangReflectType> type, IOSClass *toClass);

FOUNDATION_EXPORT id<JavaUtilMap> OrgApacheCommonsLang3ReflectTypeUtils_determineTypeArgumentsWithIOSClass_withJavaLangReflectParameterizedType_(IOSClass *cls, id<JavaLangReflectParameterizedType> superType);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3ReflectTypeUtils_isInstanceWithId_withJavaLangReflectType_(id value, id<JavaLangReflectType> type);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsLang3ReflectTypeUtils_normalizeUpperBoundsWithJavaLangReflectTypeArray_(IOSObjectArray *bounds);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsLang3ReflectTypeUtils_getImplicitBoundsWithJavaLangReflectTypeVariable_(id<JavaLangReflectTypeVariable> typeVariable);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsLang3ReflectTypeUtils_getImplicitUpperBoundsWithJavaLangReflectWildcardType_(id<JavaLangReflectWildcardType> wildcardType);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsLang3ReflectTypeUtils_getImplicitLowerBoundsWithJavaLangReflectWildcardType_(id<JavaLangReflectWildcardType> wildcardType);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3ReflectTypeUtils_typesSatisfyVariablesWithJavaUtilMap_(id<JavaUtilMap> typeVarAssigns);

FOUNDATION_EXPORT IOSClass *OrgApacheCommonsLang3ReflectTypeUtils_getRawTypeWithJavaLangReflectType_withJavaLangReflectType_(id<JavaLangReflectType> type, id<JavaLangReflectType> assigningType);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3ReflectTypeUtils_isArrayTypeWithJavaLangReflectType_(id<JavaLangReflectType> type);

FOUNDATION_EXPORT id<JavaLangReflectType> OrgApacheCommonsLang3ReflectTypeUtils_getArrayComponentTypeWithJavaLangReflectType_(id<JavaLangReflectType> type);

FOUNDATION_EXPORT id<JavaLangReflectType> OrgApacheCommonsLang3ReflectTypeUtils_unrollVariablesWithJavaUtilMap_withJavaLangReflectType_(id<JavaUtilMap> typeArguments, id<JavaLangReflectType> type);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3ReflectTypeUtils_containsTypeVariablesWithJavaLangReflectType_(id<JavaLangReflectType> type);

FOUNDATION_EXPORT id<JavaLangReflectParameterizedType> OrgApacheCommonsLang3ReflectTypeUtils_parameterizeWithIOSClass_withJavaLangReflectTypeArray_(IOSClass *raw, IOSObjectArray *typeArguments);

FOUNDATION_EXPORT id<JavaLangReflectParameterizedType> OrgApacheCommonsLang3ReflectTypeUtils_parameterizeWithIOSClass_withJavaUtilMap_(IOSClass *raw, id<JavaUtilMap> typeArgMappings);

FOUNDATION_EXPORT id<JavaLangReflectParameterizedType> OrgApacheCommonsLang3ReflectTypeUtils_parameterizeWithOwnerWithJavaLangReflectType_withIOSClass_withJavaLangReflectTypeArray_(id<JavaLangReflectType> owner, IOSClass *raw, IOSObjectArray *typeArguments);

FOUNDATION_EXPORT id<JavaLangReflectParameterizedType> OrgApacheCommonsLang3ReflectTypeUtils_parameterizeWithOwnerWithJavaLangReflectType_withIOSClass_withJavaUtilMap_(id<JavaLangReflectType> owner, IOSClass *raw, id<JavaUtilMap> typeArgMappings);

FOUNDATION_EXPORT OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder *OrgApacheCommonsLang3ReflectTypeUtils_wildcardType(void);

FOUNDATION_EXPORT id<JavaLangReflectGenericArrayType> OrgApacheCommonsLang3ReflectTypeUtils_genericArrayTypeWithJavaLangReflectType_(id<JavaLangReflectType> componentType);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectType_withJavaLangReflectType_(id<JavaLangReflectType> t1, id<JavaLangReflectType> t2);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3ReflectTypeUtils_toStringWithJavaLangReflectType_(id<JavaLangReflectType> type);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3ReflectTypeUtils_toLongStringWithJavaLangReflectTypeVariable_(id<JavaLangReflectTypeVariable> var);

FOUNDATION_EXPORT id<OrgApacheCommonsLang3ReflectTyped> OrgApacheCommonsLang3ReflectTypeUtils_wrapWithJavaLangReflectType_(id<JavaLangReflectType> type);

FOUNDATION_EXPORT id<OrgApacheCommonsLang3ReflectTyped> OrgApacheCommonsLang3ReflectTypeUtils_wrapWithIOSClass_(IOSClass *type);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3ReflectTypeUtils)

#endif

#if !defined (OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder_) && (INCLUDE_ALL_OrgApacheCommonsLang3ReflectTypeUtils || defined(INCLUDE_OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder))
#define OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder_

#define RESTRICT_OrgApacheCommonsLang3BuilderBuilder 1
#define INCLUDE_OrgApacheCommonsLang3BuilderBuilder 1
#include "org/apache/commons/lang3/builder/Builder.h"

@class IOSObjectArray;
@protocol JavaLangReflectWildcardType;

@interface OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder : NSObject < OrgApacheCommonsLang3BuilderBuilder >

#pragma mark Public

- (id<JavaLangReflectWildcardType>)build;

- (OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder *)withLowerBoundsWithJavaLangReflectTypeArray:(IOSObjectArray *)bounds;

- (OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder *)withUpperBoundsWithJavaLangReflectTypeArray:(IOSObjectArray *)bounds;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder)

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsLang3ReflectTypeUtils")
