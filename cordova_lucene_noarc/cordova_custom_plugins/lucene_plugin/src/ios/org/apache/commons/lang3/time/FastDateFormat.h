//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/time/FastDateFormat.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsLang3TimeFastDateFormat")
#ifdef RESTRICT_OrgApacheCommonsLang3TimeFastDateFormat
#define INCLUDE_ALL_OrgApacheCommonsLang3TimeFastDateFormat 0
#else
#define INCLUDE_ALL_OrgApacheCommonsLang3TimeFastDateFormat 1
#endif
#undef RESTRICT_OrgApacheCommonsLang3TimeFastDateFormat

#if !defined (OrgApacheCommonsLang3TimeFastDateFormat_) && (INCLUDE_ALL_OrgApacheCommonsLang3TimeFastDateFormat || defined(INCLUDE_OrgApacheCommonsLang3TimeFastDateFormat))
#define OrgApacheCommonsLang3TimeFastDateFormat_

#define RESTRICT_JavaTextFormat 1
#define INCLUDE_JavaTextFormat 1
#include "java/text/Format.h"

#define RESTRICT_OrgApacheCommonsLang3TimeDateParser 1
#define INCLUDE_OrgApacheCommonsLang3TimeDateParser 1
#include "org/apache/commons/lang3/time/DateParser.h"

#define RESTRICT_OrgApacheCommonsLang3TimeDatePrinter 1
#define INCLUDE_OrgApacheCommonsLang3TimeDatePrinter 1
#include "org/apache/commons/lang3/time/DatePrinter.h"

@class JavaLangStringBuffer;
@class JavaTextFieldPosition;
@class JavaTextParsePosition;
@class JavaUtilCalendar;
@class JavaUtilDate;
@class JavaUtilLocale;
@class JavaUtilTimeZone;

@interface OrgApacheCommonsLang3TimeFastDateFormat : JavaTextFormat < OrgApacheCommonsLang3TimeDateParser, OrgApacheCommonsLang3TimeDatePrinter >

#pragma mark Public

- (jboolean)isEqual:(id)obj;

- (NSString *)formatWithJavaUtilCalendar:(JavaUtilCalendar *)calendar;

- (JavaLangStringBuffer *)formatWithJavaUtilCalendar:(JavaUtilCalendar *)calendar
                            withJavaLangStringBuffer:(JavaLangStringBuffer *)buf;

- (NSString *)formatWithJavaUtilDate:(JavaUtilDate *)date;

- (JavaLangStringBuffer *)formatWithJavaUtilDate:(JavaUtilDate *)date
                        withJavaLangStringBuffer:(JavaLangStringBuffer *)buf;

- (NSString *)formatWithLong:(jlong)millis;

- (JavaLangStringBuffer *)formatWithLong:(jlong)millis
                withJavaLangStringBuffer:(JavaLangStringBuffer *)buf;

- (JavaLangStringBuffer *)formatWithId:(id)obj
              withJavaLangStringBuffer:(JavaLangStringBuffer *)toAppendTo
             withJavaTextFieldPosition:(JavaTextFieldPosition *)pos;

+ (OrgApacheCommonsLang3TimeFastDateFormat *)getDateInstanceWithInt:(jint)style;

+ (OrgApacheCommonsLang3TimeFastDateFormat *)getDateInstanceWithInt:(jint)style
                                                 withJavaUtilLocale:(JavaUtilLocale *)locale;

+ (OrgApacheCommonsLang3TimeFastDateFormat *)getDateInstanceWithInt:(jint)style
                                               withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone;

+ (OrgApacheCommonsLang3TimeFastDateFormat *)getDateInstanceWithInt:(jint)style
                                               withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                                                 withJavaUtilLocale:(JavaUtilLocale *)locale;

+ (OrgApacheCommonsLang3TimeFastDateFormat *)getDateTimeInstanceWithInt:(jint)dateStyle
                                                                withInt:(jint)timeStyle;

+ (OrgApacheCommonsLang3TimeFastDateFormat *)getDateTimeInstanceWithInt:(jint)dateStyle
                                                                withInt:(jint)timeStyle
                                                     withJavaUtilLocale:(JavaUtilLocale *)locale;

+ (OrgApacheCommonsLang3TimeFastDateFormat *)getDateTimeInstanceWithInt:(jint)dateStyle
                                                                withInt:(jint)timeStyle
                                                   withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone;

+ (OrgApacheCommonsLang3TimeFastDateFormat *)getDateTimeInstanceWithInt:(jint)dateStyle
                                                                withInt:(jint)timeStyle
                                                   withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                                                     withJavaUtilLocale:(JavaUtilLocale *)locale;

+ (OrgApacheCommonsLang3TimeFastDateFormat *)getInstance;

+ (OrgApacheCommonsLang3TimeFastDateFormat *)getInstanceWithNSString:(NSString *)pattern;

+ (OrgApacheCommonsLang3TimeFastDateFormat *)getInstanceWithNSString:(NSString *)pattern
                                                  withJavaUtilLocale:(JavaUtilLocale *)locale;

+ (OrgApacheCommonsLang3TimeFastDateFormat *)getInstanceWithNSString:(NSString *)pattern
                                                withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone;

+ (OrgApacheCommonsLang3TimeFastDateFormat *)getInstanceWithNSString:(NSString *)pattern
                                                withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                                                  withJavaUtilLocale:(JavaUtilLocale *)locale;

- (JavaUtilLocale *)getLocale;

- (jint)getMaxLengthEstimate;

- (NSString *)getPattern;

+ (OrgApacheCommonsLang3TimeFastDateFormat *)getTimeInstanceWithInt:(jint)style;

+ (OrgApacheCommonsLang3TimeFastDateFormat *)getTimeInstanceWithInt:(jint)style
                                                 withJavaUtilLocale:(JavaUtilLocale *)locale;

+ (OrgApacheCommonsLang3TimeFastDateFormat *)getTimeInstanceWithInt:(jint)style
                                               withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone;

+ (OrgApacheCommonsLang3TimeFastDateFormat *)getTimeInstanceWithInt:(jint)style
                                               withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                                                 withJavaUtilLocale:(JavaUtilLocale *)locale;

- (JavaUtilTimeZone *)getTimeZone;

- (NSUInteger)hash;

- (JavaUtilDate *)parseWithNSString:(NSString *)source;

- (JavaUtilDate *)parseWithNSString:(NSString *)source
          withJavaTextParsePosition:(JavaTextParsePosition *)pos;

- (id)parseObjectWithNSString:(NSString *)source
    withJavaTextParsePosition:(JavaTextParsePosition *)pos;

- (NSString *)description;

#pragma mark Protected

- (instancetype)initWithNSString:(NSString *)pattern
            withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
              withJavaUtilLocale:(JavaUtilLocale *)locale;

- (instancetype)initWithNSString:(NSString *)pattern
            withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
              withJavaUtilLocale:(JavaUtilLocale *)locale
                withJavaUtilDate:(JavaUtilDate *)centuryStart;

- (JavaLangStringBuffer *)applyRulesWithJavaUtilCalendar:(JavaUtilCalendar *)calendar
                                withJavaLangStringBuffer:(JavaLangStringBuffer *)buf;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsLang3TimeFastDateFormat)

inline jint OrgApacheCommonsLang3TimeFastDateFormat_get_FULL(void);
#define OrgApacheCommonsLang3TimeFastDateFormat_FULL 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3TimeFastDateFormat, FULL, jint)

inline jint OrgApacheCommonsLang3TimeFastDateFormat_get_LONG(void);
#define OrgApacheCommonsLang3TimeFastDateFormat_LONG 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3TimeFastDateFormat, LONG, jint)

inline jint OrgApacheCommonsLang3TimeFastDateFormat_get_MEDIUM(void);
#define OrgApacheCommonsLang3TimeFastDateFormat_MEDIUM 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3TimeFastDateFormat, MEDIUM, jint)

inline jint OrgApacheCommonsLang3TimeFastDateFormat_get_SHORT(void);
#define OrgApacheCommonsLang3TimeFastDateFormat_SHORT 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3TimeFastDateFormat, SHORT, jint)

FOUNDATION_EXPORT OrgApacheCommonsLang3TimeFastDateFormat *OrgApacheCommonsLang3TimeFastDateFormat_getInstance(void);

FOUNDATION_EXPORT OrgApacheCommonsLang3TimeFastDateFormat *OrgApacheCommonsLang3TimeFastDateFormat_getInstanceWithNSString_(NSString *pattern);

FOUNDATION_EXPORT OrgApacheCommonsLang3TimeFastDateFormat *OrgApacheCommonsLang3TimeFastDateFormat_getInstanceWithNSString_withJavaUtilTimeZone_(NSString *pattern, JavaUtilTimeZone *timeZone);

FOUNDATION_EXPORT OrgApacheCommonsLang3TimeFastDateFormat *OrgApacheCommonsLang3TimeFastDateFormat_getInstanceWithNSString_withJavaUtilLocale_(NSString *pattern, JavaUtilLocale *locale);

FOUNDATION_EXPORT OrgApacheCommonsLang3TimeFastDateFormat *OrgApacheCommonsLang3TimeFastDateFormat_getInstanceWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_(NSString *pattern, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale);

FOUNDATION_EXPORT OrgApacheCommonsLang3TimeFastDateFormat *OrgApacheCommonsLang3TimeFastDateFormat_getDateInstanceWithInt_(jint style);

FOUNDATION_EXPORT OrgApacheCommonsLang3TimeFastDateFormat *OrgApacheCommonsLang3TimeFastDateFormat_getDateInstanceWithInt_withJavaUtilLocale_(jint style, JavaUtilLocale *locale);

FOUNDATION_EXPORT OrgApacheCommonsLang3TimeFastDateFormat *OrgApacheCommonsLang3TimeFastDateFormat_getDateInstanceWithInt_withJavaUtilTimeZone_(jint style, JavaUtilTimeZone *timeZone);

FOUNDATION_EXPORT OrgApacheCommonsLang3TimeFastDateFormat *OrgApacheCommonsLang3TimeFastDateFormat_getDateInstanceWithInt_withJavaUtilTimeZone_withJavaUtilLocale_(jint style, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale);

FOUNDATION_EXPORT OrgApacheCommonsLang3TimeFastDateFormat *OrgApacheCommonsLang3TimeFastDateFormat_getTimeInstanceWithInt_(jint style);

FOUNDATION_EXPORT OrgApacheCommonsLang3TimeFastDateFormat *OrgApacheCommonsLang3TimeFastDateFormat_getTimeInstanceWithInt_withJavaUtilLocale_(jint style, JavaUtilLocale *locale);

FOUNDATION_EXPORT OrgApacheCommonsLang3TimeFastDateFormat *OrgApacheCommonsLang3TimeFastDateFormat_getTimeInstanceWithInt_withJavaUtilTimeZone_(jint style, JavaUtilTimeZone *timeZone);

FOUNDATION_EXPORT OrgApacheCommonsLang3TimeFastDateFormat *OrgApacheCommonsLang3TimeFastDateFormat_getTimeInstanceWithInt_withJavaUtilTimeZone_withJavaUtilLocale_(jint style, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale);

FOUNDATION_EXPORT OrgApacheCommonsLang3TimeFastDateFormat *OrgApacheCommonsLang3TimeFastDateFormat_getDateTimeInstanceWithInt_withInt_(jint dateStyle, jint timeStyle);

FOUNDATION_EXPORT OrgApacheCommonsLang3TimeFastDateFormat *OrgApacheCommonsLang3TimeFastDateFormat_getDateTimeInstanceWithInt_withInt_withJavaUtilLocale_(jint dateStyle, jint timeStyle, JavaUtilLocale *locale);

FOUNDATION_EXPORT OrgApacheCommonsLang3TimeFastDateFormat *OrgApacheCommonsLang3TimeFastDateFormat_getDateTimeInstanceWithInt_withInt_withJavaUtilTimeZone_(jint dateStyle, jint timeStyle, JavaUtilTimeZone *timeZone);

FOUNDATION_EXPORT OrgApacheCommonsLang3TimeFastDateFormat *OrgApacheCommonsLang3TimeFastDateFormat_getDateTimeInstanceWithInt_withInt_withJavaUtilTimeZone_withJavaUtilLocale_(jint dateStyle, jint timeStyle, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale);

FOUNDATION_EXPORT void OrgApacheCommonsLang3TimeFastDateFormat_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_(OrgApacheCommonsLang3TimeFastDateFormat *self, NSString *pattern, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale);

FOUNDATION_EXPORT OrgApacheCommonsLang3TimeFastDateFormat *new_OrgApacheCommonsLang3TimeFastDateFormat_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_(NSString *pattern, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsLang3TimeFastDateFormat *create_OrgApacheCommonsLang3TimeFastDateFormat_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_(NSString *pattern, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale);

FOUNDATION_EXPORT void OrgApacheCommonsLang3TimeFastDateFormat_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_withJavaUtilDate_(OrgApacheCommonsLang3TimeFastDateFormat *self, NSString *pattern, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale, JavaUtilDate *centuryStart);

FOUNDATION_EXPORT OrgApacheCommonsLang3TimeFastDateFormat *new_OrgApacheCommonsLang3TimeFastDateFormat_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_withJavaUtilDate_(NSString *pattern, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale, JavaUtilDate *centuryStart) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsLang3TimeFastDateFormat *create_OrgApacheCommonsLang3TimeFastDateFormat_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_withJavaUtilDate_(NSString *pattern, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale, JavaUtilDate *centuryStart);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFastDateFormat)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsLang3TimeFastDateFormat")
