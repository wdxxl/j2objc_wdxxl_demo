//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/ClassUtils.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsLang3ClassUtils")
#ifdef RESTRICT_OrgApacheCommonsLang3ClassUtils
#define INCLUDE_ALL_OrgApacheCommonsLang3ClassUtils 0
#else
#define INCLUDE_ALL_OrgApacheCommonsLang3ClassUtils 1
#endif
#undef RESTRICT_OrgApacheCommonsLang3ClassUtils

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheCommonsLang3ClassUtils_) && (INCLUDE_ALL_OrgApacheCommonsLang3ClassUtils || defined(INCLUDE_OrgApacheCommonsLang3ClassUtils))
#define OrgApacheCommonsLang3ClassUtils_

@class IOSClass;
@class IOSObjectArray;
@class JavaLangClassLoader;
@class JavaLangReflectMethod;
@class OrgApacheCommonsLang3ClassUtils_Interfaces;
@protocol JavaLangIterable;
@protocol JavaUtilList;

@interface OrgApacheCommonsLang3ClassUtils : NSObject

#pragma mark Public

- (instancetype)init;

+ (id<JavaUtilList>)convertClassesToClassNamesWithJavaUtilList:(id<JavaUtilList>)classes;

+ (id<JavaUtilList>)convertClassNamesToClassesWithJavaUtilList:(id<JavaUtilList>)classNames;

+ (NSString *)getAbbreviatedNameWithIOSClass:(IOSClass *)cls
                                     withInt:(jint)len;

+ (NSString *)getAbbreviatedNameWithNSString:(NSString *)className_
                                     withInt:(jint)len;

+ (id<JavaUtilList>)getAllInterfacesWithIOSClass:(IOSClass *)cls;

+ (id<JavaUtilList>)getAllSuperclassesWithIOSClass:(IOSClass *)cls;

+ (IOSClass *)getClassWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader
                                 withNSString:(NSString *)className_;

+ (IOSClass *)getClassWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader
                                 withNSString:(NSString *)className_
                                  withBoolean:(jboolean)initialize_;

+ (IOSClass *)getClassWithNSString:(NSString *)className_;

+ (IOSClass *)getClassWithNSString:(NSString *)className_
                       withBoolean:(jboolean)initialize_;

+ (NSString *)getPackageCanonicalNameWithIOSClass:(IOSClass *)cls;

+ (NSString *)getPackageCanonicalNameWithId:(id)object
                               withNSString:(NSString *)valueIfNull;

+ (NSString *)getPackageCanonicalNameWithNSString:(NSString *)canonicalName;

+ (NSString *)getPackageNameWithIOSClass:(IOSClass *)cls;

+ (NSString *)getPackageNameWithId:(id)object
                      withNSString:(NSString *)valueIfNull;

+ (NSString *)getPackageNameWithNSString:(NSString *)className_;

+ (JavaLangReflectMethod *)getPublicMethodWithIOSClass:(IOSClass *)cls
                                          withNSString:(NSString *)methodName
                                     withIOSClassArray:(IOSObjectArray *)parameterTypes;

+ (NSString *)getShortCanonicalNameWithIOSClass:(IOSClass *)cls;

+ (NSString *)getShortCanonicalNameWithId:(id)object
                             withNSString:(NSString *)valueIfNull;

+ (NSString *)getShortCanonicalNameWithNSString:(NSString *)canonicalName;

+ (NSString *)getShortClassNameWithIOSClass:(IOSClass *)cls;

+ (NSString *)getShortClassNameWithId:(id)object
                         withNSString:(NSString *)valueIfNull;

+ (NSString *)getShortClassNameWithNSString:(NSString *)className_;

+ (NSString *)getSimpleNameWithIOSClass:(IOSClass *)cls;

+ (NSString *)getSimpleNameWithId:(id)object
                     withNSString:(NSString *)valueIfNull;

+ (id<JavaLangIterable>)hierarchyWithIOSClass:(IOSClass *)type;

+ (id<JavaLangIterable>)hierarchyWithIOSClass:(IOSClass *)type
withOrgApacheCommonsLang3ClassUtils_Interfaces:(OrgApacheCommonsLang3ClassUtils_Interfaces *)interfacesBehavior;

+ (jboolean)isAssignableWithIOSClass:(IOSClass *)cls
                        withIOSClass:(IOSClass *)toClass;

+ (jboolean)isAssignableWithIOSClass:(IOSClass *)cls
                        withIOSClass:(IOSClass *)toClass
                         withBoolean:(jboolean)autoboxing;

+ (jboolean)isAssignableWithIOSClassArray:(IOSObjectArray *)classArray
                        withIOSClassArray:(IOSObjectArray *)toClassArray;

+ (jboolean)isAssignableWithIOSClassArray:(IOSObjectArray *)classArray
                        withIOSClassArray:(IOSObjectArray *)toClassArray
                              withBoolean:(jboolean)autoboxing;

+ (jboolean)isInnerClassWithIOSClass:(IOSClass *)cls;

+ (jboolean)isPrimitiveOrWrapperWithIOSClass:(IOSClass *)type;

+ (jboolean)isPrimitiveWrapperWithIOSClass:(IOSClass *)type;

+ (IOSObjectArray *)primitivesToWrappersWithIOSClassArray:(IOSObjectArray *)classes;

+ (IOSClass *)primitiveToWrapperWithIOSClass:(IOSClass *)cls;

+ (IOSObjectArray *)toClassWithNSObjectArray:(IOSObjectArray *)array;

+ (IOSObjectArray *)wrappersToPrimitivesWithIOSClassArray:(IOSObjectArray *)classes;

+ (IOSClass *)wrapperToPrimitiveWithIOSClass:(IOSClass *)cls;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsLang3ClassUtils)

inline jchar OrgApacheCommonsLang3ClassUtils_get_PACKAGE_SEPARATOR_CHAR(void);
#define OrgApacheCommonsLang3ClassUtils_PACKAGE_SEPARATOR_CHAR '.'
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3ClassUtils, PACKAGE_SEPARATOR_CHAR, jchar)

inline NSString *OrgApacheCommonsLang3ClassUtils_get_PACKAGE_SEPARATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3ClassUtils_PACKAGE_SEPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3ClassUtils, PACKAGE_SEPARATOR, NSString *)

inline jchar OrgApacheCommonsLang3ClassUtils_get_INNER_CLASS_SEPARATOR_CHAR(void);
#define OrgApacheCommonsLang3ClassUtils_INNER_CLASS_SEPARATOR_CHAR '$'
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3ClassUtils, INNER_CLASS_SEPARATOR_CHAR, jchar)

inline NSString *OrgApacheCommonsLang3ClassUtils_get_INNER_CLASS_SEPARATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3ClassUtils_INNER_CLASS_SEPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3ClassUtils, INNER_CLASS_SEPARATOR, NSString *)

FOUNDATION_EXPORT void OrgApacheCommonsLang3ClassUtils_init(OrgApacheCommonsLang3ClassUtils *self);

FOUNDATION_EXPORT OrgApacheCommonsLang3ClassUtils *new_OrgApacheCommonsLang3ClassUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsLang3ClassUtils *create_OrgApacheCommonsLang3ClassUtils_init(void);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3ClassUtils_getShortClassNameWithId_withNSString_(id object, NSString *valueIfNull);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3ClassUtils_getShortClassNameWithIOSClass_(IOSClass *cls);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3ClassUtils_getShortClassNameWithNSString_(NSString *className_);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3ClassUtils_getSimpleNameWithIOSClass_(IOSClass *cls);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3ClassUtils_getSimpleNameWithId_withNSString_(id object, NSString *valueIfNull);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3ClassUtils_getPackageNameWithId_withNSString_(id object, NSString *valueIfNull);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3ClassUtils_getPackageNameWithIOSClass_(IOSClass *cls);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3ClassUtils_getPackageNameWithNSString_(NSString *className_);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3ClassUtils_getAbbreviatedNameWithIOSClass_withInt_(IOSClass *cls, jint len);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3ClassUtils_getAbbreviatedNameWithNSString_withInt_(NSString *className_, jint len);

FOUNDATION_EXPORT id<JavaUtilList> OrgApacheCommonsLang3ClassUtils_getAllSuperclassesWithIOSClass_(IOSClass *cls);

FOUNDATION_EXPORT id<JavaUtilList> OrgApacheCommonsLang3ClassUtils_getAllInterfacesWithIOSClass_(IOSClass *cls);

FOUNDATION_EXPORT id<JavaUtilList> OrgApacheCommonsLang3ClassUtils_convertClassNamesToClassesWithJavaUtilList_(id<JavaUtilList> classNames);

FOUNDATION_EXPORT id<JavaUtilList> OrgApacheCommonsLang3ClassUtils_convertClassesToClassNamesWithJavaUtilList_(id<JavaUtilList> classes);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3ClassUtils_isAssignableWithIOSClassArray_withIOSClassArray_(IOSObjectArray *classArray, IOSObjectArray *toClassArray);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3ClassUtils_isAssignableWithIOSClassArray_withIOSClassArray_withBoolean_(IOSObjectArray *classArray, IOSObjectArray *toClassArray, jboolean autoboxing);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3ClassUtils_isPrimitiveOrWrapperWithIOSClass_(IOSClass *type);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3ClassUtils_isPrimitiveWrapperWithIOSClass_(IOSClass *type);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3ClassUtils_isAssignableWithIOSClass_withIOSClass_(IOSClass *cls, IOSClass *toClass);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3ClassUtils_isAssignableWithIOSClass_withIOSClass_withBoolean_(IOSClass *cls, IOSClass *toClass, jboolean autoboxing);

FOUNDATION_EXPORT IOSClass *OrgApacheCommonsLang3ClassUtils_primitiveToWrapperWithIOSClass_(IOSClass *cls);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsLang3ClassUtils_primitivesToWrappersWithIOSClassArray_(IOSObjectArray *classes);

FOUNDATION_EXPORT IOSClass *OrgApacheCommonsLang3ClassUtils_wrapperToPrimitiveWithIOSClass_(IOSClass *cls);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsLang3ClassUtils_wrappersToPrimitivesWithIOSClassArray_(IOSObjectArray *classes);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3ClassUtils_isInnerClassWithIOSClass_(IOSClass *cls);

FOUNDATION_EXPORT IOSClass *OrgApacheCommonsLang3ClassUtils_getClassWithJavaLangClassLoader_withNSString_withBoolean_(JavaLangClassLoader *classLoader, NSString *className_, jboolean initialize_);

FOUNDATION_EXPORT IOSClass *OrgApacheCommonsLang3ClassUtils_getClassWithJavaLangClassLoader_withNSString_(JavaLangClassLoader *classLoader, NSString *className_);

FOUNDATION_EXPORT IOSClass *OrgApacheCommonsLang3ClassUtils_getClassWithNSString_(NSString *className_);

FOUNDATION_EXPORT IOSClass *OrgApacheCommonsLang3ClassUtils_getClassWithNSString_withBoolean_(NSString *className_, jboolean initialize_);

FOUNDATION_EXPORT JavaLangReflectMethod *OrgApacheCommonsLang3ClassUtils_getPublicMethodWithIOSClass_withNSString_withIOSClassArray_(IOSClass *cls, NSString *methodName, IOSObjectArray *parameterTypes);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsLang3ClassUtils_toClassWithNSObjectArray_(IOSObjectArray *array);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3ClassUtils_getShortCanonicalNameWithId_withNSString_(id object, NSString *valueIfNull);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3ClassUtils_getShortCanonicalNameWithIOSClass_(IOSClass *cls);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3ClassUtils_getShortCanonicalNameWithNSString_(NSString *canonicalName);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3ClassUtils_getPackageCanonicalNameWithId_withNSString_(id object, NSString *valueIfNull);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3ClassUtils_getPackageCanonicalNameWithIOSClass_(IOSClass *cls);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3ClassUtils_getPackageCanonicalNameWithNSString_(NSString *canonicalName);

FOUNDATION_EXPORT id<JavaLangIterable> OrgApacheCommonsLang3ClassUtils_hierarchyWithIOSClass_(IOSClass *type);

FOUNDATION_EXPORT id<JavaLangIterable> OrgApacheCommonsLang3ClassUtils_hierarchyWithIOSClass_withOrgApacheCommonsLang3ClassUtils_Interfaces_(IOSClass *type, OrgApacheCommonsLang3ClassUtils_Interfaces *interfacesBehavior);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3ClassUtils)

#endif

#if !defined (OrgApacheCommonsLang3ClassUtils_Interfaces_) && (INCLUDE_ALL_OrgApacheCommonsLang3ClassUtils || defined(INCLUDE_OrgApacheCommonsLang3ClassUtils_Interfaces))
#define OrgApacheCommonsLang3ClassUtils_Interfaces_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, OrgApacheCommonsLang3ClassUtils_Interfaces_Enum) {
  OrgApacheCommonsLang3ClassUtils_Interfaces_Enum_INCLUDE = 0,
  OrgApacheCommonsLang3ClassUtils_Interfaces_Enum_EXCLUDE = 1,
};

@interface OrgApacheCommonsLang3ClassUtils_Interfaces : JavaLangEnum

#pragma mark Public

+ (OrgApacheCommonsLang3ClassUtils_Interfaces *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsLang3ClassUtils_Interfaces)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT OrgApacheCommonsLang3ClassUtils_Interfaces *OrgApacheCommonsLang3ClassUtils_Interfaces_values_[];

inline OrgApacheCommonsLang3ClassUtils_Interfaces *OrgApacheCommonsLang3ClassUtils_Interfaces_get_INCLUDE(void);
J2OBJC_ENUM_CONSTANT(OrgApacheCommonsLang3ClassUtils_Interfaces, INCLUDE)

inline OrgApacheCommonsLang3ClassUtils_Interfaces *OrgApacheCommonsLang3ClassUtils_Interfaces_get_EXCLUDE(void);
J2OBJC_ENUM_CONSTANT(OrgApacheCommonsLang3ClassUtils_Interfaces, EXCLUDE)

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsLang3ClassUtils_Interfaces_values(void);

FOUNDATION_EXPORT OrgApacheCommonsLang3ClassUtils_Interfaces *OrgApacheCommonsLang3ClassUtils_Interfaces_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT OrgApacheCommonsLang3ClassUtils_Interfaces *OrgApacheCommonsLang3ClassUtils_Interfaces_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3ClassUtils_Interfaces)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsLang3ClassUtils")
