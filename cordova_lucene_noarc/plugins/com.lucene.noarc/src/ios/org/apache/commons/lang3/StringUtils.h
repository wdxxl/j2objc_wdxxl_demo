//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/StringUtils.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsLang3StringUtils")
#ifdef RESTRICT_OrgApacheCommonsLang3StringUtils
#define INCLUDE_ALL_OrgApacheCommonsLang3StringUtils 0
#else
#define INCLUDE_ALL_OrgApacheCommonsLang3StringUtils 1
#endif
#undef RESTRICT_OrgApacheCommonsLang3StringUtils

#if !defined (OrgApacheCommonsLang3StringUtils_) && (INCLUDE_ALL_OrgApacheCommonsLang3StringUtils || defined(INCLUDE_OrgApacheCommonsLang3StringUtils))
#define OrgApacheCommonsLang3StringUtils_

@class IOSByteArray;
@class IOSCharArray;
@class IOSDoubleArray;
@class IOSFloatArray;
@class IOSIntArray;
@class IOSLongArray;
@class IOSObjectArray;
@class IOSShortArray;
@class JavaNioCharsetCharset;
@class JavaUtilLocale;
@protocol JavaLangCharSequence;
@protocol JavaLangIterable;
@protocol JavaUtilIterator;

@interface OrgApacheCommonsLang3StringUtils : NSObject

#pragma mark Public

- (instancetype)init;

+ (NSString *)abbreviateWithNSString:(NSString *)str
                             withInt:(jint)maxWidth;

+ (NSString *)abbreviateWithNSString:(NSString *)str
                             withInt:(jint)offset
                             withInt:(jint)maxWidth;

+ (NSString *)abbreviateMiddleWithNSString:(NSString *)str
                              withNSString:(NSString *)middle
                                   withInt:(jint)length;

+ (NSString *)appendIfMissingWithNSString:(NSString *)str
                 withJavaLangCharSequence:(id<JavaLangCharSequence>)suffix
            withJavaLangCharSequenceArray:(IOSObjectArray *)suffixes;

+ (NSString *)appendIfMissingIgnoreCaseWithNSString:(NSString *)str
                           withJavaLangCharSequence:(id<JavaLangCharSequence>)suffix
                      withJavaLangCharSequenceArray:(IOSObjectArray *)suffixes;

+ (NSString *)capitalizeWithNSString:(NSString *)str;

+ (NSString *)centerWithNSString:(NSString *)str
                         withInt:(jint)size;

+ (NSString *)centerWithNSString:(NSString *)str
                         withInt:(jint)size
                        withChar:(jchar)padChar;

+ (NSString *)centerWithNSString:(NSString *)str
                         withInt:(jint)size
                    withNSString:(NSString *)padStr;

+ (NSString *)chompWithNSString:(NSString *)str;

+ (NSString *)chompWithNSString:(NSString *)str
                   withNSString:(NSString *)separator;

+ (NSString *)chopWithNSString:(NSString *)str;

+ (jboolean)containsWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                    withJavaLangCharSequence:(id<JavaLangCharSequence>)searchSeq;

+ (jboolean)containsWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                                     withInt:(jint)searchChar;

+ (jboolean)containsAnyWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                                  withCharArray:(IOSCharArray *)searchChars;

+ (jboolean)containsAnyWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                       withJavaLangCharSequence:(id<JavaLangCharSequence>)searchChars;

+ (jboolean)containsAnyWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                  withJavaLangCharSequenceArray:(IOSObjectArray *)searchCharSequences;

+ (jboolean)containsIgnoreCaseWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                              withJavaLangCharSequence:(id<JavaLangCharSequence>)searchStr;

+ (jboolean)containsNoneWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                                   withCharArray:(IOSCharArray *)searchChars;

+ (jboolean)containsNoneWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                                    withNSString:(NSString *)invalidChars;

+ (jboolean)containsOnlyWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                                   withCharArray:(IOSCharArray *)valid;

+ (jboolean)containsOnlyWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                                    withNSString:(NSString *)validChars;

+ (jboolean)containsWhitespaceWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq;

+ (jint)countMatchesWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                                    withChar:(jchar)ch;

+ (jint)countMatchesWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                    withJavaLangCharSequence:(id<JavaLangCharSequence>)sub;

+ (id<JavaLangCharSequence>)defaultIfBlankWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                                          withJavaLangCharSequence:(id<JavaLangCharSequence>)defaultStr;

+ (id<JavaLangCharSequence>)defaultIfEmptyWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                                          withJavaLangCharSequence:(id<JavaLangCharSequence>)defaultStr;

+ (NSString *)defaultStringWithNSString:(NSString *)str;

+ (NSString *)defaultStringWithNSString:(NSString *)str
                           withNSString:(NSString *)defaultStr;

+ (NSString *)deleteWhitespaceWithNSString:(NSString *)str;

+ (NSString *)differenceWithNSString:(NSString *)str1
                        withNSString:(NSString *)str2;

+ (jboolean)endsWithWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                    withJavaLangCharSequence:(id<JavaLangCharSequence>)suffix;

+ (jboolean)endsWithAnyWithJavaLangCharSequence:(id<JavaLangCharSequence>)string
                  withJavaLangCharSequenceArray:(IOSObjectArray *)searchStrings;

+ (jboolean)endsWithIgnoreCaseWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                              withJavaLangCharSequence:(id<JavaLangCharSequence>)suffix;

+ (jboolean)equalsWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs1
                  withJavaLangCharSequence:(id<JavaLangCharSequence>)cs2;

+ (jboolean)equalsIgnoreCaseWithJavaLangCharSequence:(id<JavaLangCharSequence>)str1
                            withJavaLangCharSequence:(id<JavaLangCharSequence>)str2;

+ (NSString *)getCommonPrefixWithNSStringArray:(IOSObjectArray *)strs;

+ (jint)getFuzzyDistanceWithJavaLangCharSequence:(id<JavaLangCharSequence>)term
                        withJavaLangCharSequence:(id<JavaLangCharSequence>)query
                              withJavaUtilLocale:(JavaUtilLocale *)locale;

+ (jdouble)getJaroWinklerDistanceWithJavaLangCharSequence:(id<JavaLangCharSequence>)first
                                 withJavaLangCharSequence:(id<JavaLangCharSequence>)second;

+ (jint)getLevenshteinDistanceWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                              withJavaLangCharSequence:(id<JavaLangCharSequence>)t;

+ (jint)getLevenshteinDistanceWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                              withJavaLangCharSequence:(id<JavaLangCharSequence>)t
                                               withInt:(jint)threshold;

+ (jint)indexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
               withJavaLangCharSequence:(id<JavaLangCharSequence>)searchSeq;

+ (jint)indexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
               withJavaLangCharSequence:(id<JavaLangCharSequence>)searchSeq
                                withInt:(jint)startPos;

+ (jint)indexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                                withInt:(jint)searchChar;

+ (jint)indexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                                withInt:(jint)searchChar
                                withInt:(jint)startPos;

+ (jint)indexOfAnyWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                             withCharArray:(IOSCharArray *)searchChars;

+ (jint)indexOfAnyWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
             withJavaLangCharSequenceArray:(IOSObjectArray *)searchStrs;

+ (jint)indexOfAnyWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                              withNSString:(NSString *)searchChars;

+ (jint)indexOfAnyButWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                                withCharArray:(IOSCharArray *)searchChars;

+ (jint)indexOfAnyButWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                     withJavaLangCharSequence:(id<JavaLangCharSequence>)searchChars;

+ (jint)indexOfDifferenceWithJavaLangCharSequenceArray:(IOSObjectArray *)css;

+ (jint)indexOfDifferenceWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs1
                         withJavaLangCharSequence:(id<JavaLangCharSequence>)cs2;

+ (jint)indexOfIgnoreCaseWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                         withJavaLangCharSequence:(id<JavaLangCharSequence>)searchStr;

+ (jint)indexOfIgnoreCaseWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                         withJavaLangCharSequence:(id<JavaLangCharSequence>)searchStr
                                          withInt:(jint)startPos;

+ (jboolean)isAllLowerCaseWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs;

+ (jboolean)isAllUpperCaseWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs;

+ (jboolean)isAlphaWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs;

+ (jboolean)isAlphanumericWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs;

+ (jboolean)isAlphanumericSpaceWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs;

+ (jboolean)isAlphaSpaceWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs;

+ (jboolean)isAnyBlankWithJavaLangCharSequenceArray:(IOSObjectArray *)css;

+ (jboolean)isAnyEmptyWithJavaLangCharSequenceArray:(IOSObjectArray *)css;

+ (jboolean)isAsciiPrintableWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs;

+ (jboolean)isBlankWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs;

+ (jboolean)isEmptyWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs;

+ (jboolean)isNoneBlankWithJavaLangCharSequenceArray:(IOSObjectArray *)css;

+ (jboolean)isNoneEmptyWithJavaLangCharSequenceArray:(IOSObjectArray *)css;

+ (jboolean)isNotBlankWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs;

+ (jboolean)isNotEmptyWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs;

+ (jboolean)isNumericWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs;

+ (jboolean)isNumericSpaceWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs;

+ (jboolean)isWhitespaceWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs;

+ (NSString *)joinWithByteArray:(IOSByteArray *)array
                       withChar:(jchar)separator;

+ (NSString *)joinWithByteArray:(IOSByteArray *)array
                       withChar:(jchar)separator
                        withInt:(jint)startIndex
                        withInt:(jint)endIndex;

+ (NSString *)joinWithCharArray:(IOSCharArray *)array
                       withChar:(jchar)separator;

+ (NSString *)joinWithCharArray:(IOSCharArray *)array
                       withChar:(jchar)separator
                        withInt:(jint)startIndex
                        withInt:(jint)endIndex;

+ (NSString *)joinWithDoubleArray:(IOSDoubleArray *)array
                         withChar:(jchar)separator;

+ (NSString *)joinWithDoubleArray:(IOSDoubleArray *)array
                         withChar:(jchar)separator
                          withInt:(jint)startIndex
                          withInt:(jint)endIndex;

+ (NSString *)joinWithFloatArray:(IOSFloatArray *)array
                        withChar:(jchar)separator;

+ (NSString *)joinWithFloatArray:(IOSFloatArray *)array
                        withChar:(jchar)separator
                         withInt:(jint)startIndex
                         withInt:(jint)endIndex;

+ (NSString *)joinWithIntArray:(IOSIntArray *)array
                      withChar:(jchar)separator;

+ (NSString *)joinWithIntArray:(IOSIntArray *)array
                      withChar:(jchar)separator
                       withInt:(jint)startIndex
                       withInt:(jint)endIndex;

+ (NSString *)joinWithJavaLangIterable:(id<JavaLangIterable>)iterable
                              withChar:(jchar)separator;

+ (NSString *)joinWithJavaLangIterable:(id<JavaLangIterable>)iterable
                          withNSString:(NSString *)separator;

+ (NSString *)joinWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
                              withChar:(jchar)separator;

+ (NSString *)joinWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
                          withNSString:(NSString *)separator;

+ (NSString *)joinWithLongArray:(IOSLongArray *)array
                       withChar:(jchar)separator;

+ (NSString *)joinWithLongArray:(IOSLongArray *)array
                       withChar:(jchar)separator
                        withInt:(jint)startIndex
                        withInt:(jint)endIndex;

+ (NSString *)joinWithNSObjectArray:(IOSObjectArray *)array
                           withChar:(jchar)separator;

+ (NSString *)joinWithNSObjectArray:(IOSObjectArray *)array
                           withChar:(jchar)separator
                            withInt:(jint)startIndex
                            withInt:(jint)endIndex;

+ (NSString *)joinWithNSObjectArray:(IOSObjectArray *)array
                       withNSString:(NSString *)separator;

+ (NSString *)joinWithNSObjectArray:(IOSObjectArray *)array
                       withNSString:(NSString *)separator
                            withInt:(jint)startIndex
                            withInt:(jint)endIndex;

+ (NSString *)joinWithShortArray:(IOSShortArray *)array
                        withChar:(jchar)separator;

+ (NSString *)joinWithShortArray:(IOSShortArray *)array
                        withChar:(jchar)separator
                         withInt:(jint)startIndex
                         withInt:(jint)endIndex;

+ (NSString *)joinWithNSObjectArray:(IOSObjectArray *)elements;

+ (jint)lastIndexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                   withJavaLangCharSequence:(id<JavaLangCharSequence>)searchSeq;

+ (jint)lastIndexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                   withJavaLangCharSequence:(id<JavaLangCharSequence>)searchSeq
                                    withInt:(jint)startPos;

+ (jint)lastIndexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                                    withInt:(jint)searchChar;

+ (jint)lastIndexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                                    withInt:(jint)searchChar
                                    withInt:(jint)startPos;

+ (jint)lastIndexOfAnyWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                 withJavaLangCharSequenceArray:(IOSObjectArray *)searchStrs;

+ (jint)lastIndexOfIgnoreCaseWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                             withJavaLangCharSequence:(id<JavaLangCharSequence>)searchStr;

+ (jint)lastIndexOfIgnoreCaseWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                             withJavaLangCharSequence:(id<JavaLangCharSequence>)searchStr
                                              withInt:(jint)startPos;

+ (jint)lastOrdinalIndexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                          withJavaLangCharSequence:(id<JavaLangCharSequence>)searchStr
                                           withInt:(jint)ordinal;

+ (NSString *)leftWithNSString:(NSString *)str
                       withInt:(jint)len;

+ (NSString *)leftPadWithNSString:(NSString *)str
                          withInt:(jint)size;

+ (NSString *)leftPadWithNSString:(NSString *)str
                          withInt:(jint)size
                         withChar:(jchar)padChar;

+ (NSString *)leftPadWithNSString:(NSString *)str
                          withInt:(jint)size
                     withNSString:(NSString *)padStr;

+ (jint)lengthWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs;

+ (NSString *)lowerCaseWithNSString:(NSString *)str;

+ (NSString *)lowerCaseWithNSString:(NSString *)str
                 withJavaUtilLocale:(JavaUtilLocale *)locale;

+ (NSString *)midWithNSString:(NSString *)str
                      withInt:(jint)pos
                      withInt:(jint)len;

+ (NSString *)normalizeSpaceWithNSString:(NSString *)str;

+ (jint)ordinalIndexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                      withJavaLangCharSequence:(id<JavaLangCharSequence>)searchStr
                                       withInt:(jint)ordinal;

+ (NSString *)overlayWithNSString:(NSString *)str
                     withNSString:(NSString *)overlay
                          withInt:(jint)start
                          withInt:(jint)end;

+ (NSString *)prependIfMissingWithNSString:(NSString *)str
                  withJavaLangCharSequence:(id<JavaLangCharSequence>)prefix
             withJavaLangCharSequenceArray:(IOSObjectArray *)prefixes;

+ (NSString *)prependIfMissingIgnoreCaseWithNSString:(NSString *)str
                            withJavaLangCharSequence:(id<JavaLangCharSequence>)prefix
                       withJavaLangCharSequenceArray:(IOSObjectArray *)prefixes;

+ (NSString *)removeWithNSString:(NSString *)str
                        withChar:(jchar)remove;

+ (NSString *)removeWithNSString:(NSString *)str
                    withNSString:(NSString *)remove;

+ (NSString *)removeEndWithNSString:(NSString *)str
                       withNSString:(NSString *)remove;

+ (NSString *)removeEndIgnoreCaseWithNSString:(NSString *)str
                                 withNSString:(NSString *)remove;

+ (NSString *)removePatternWithNSString:(NSString *)source
                           withNSString:(NSString *)regex;

+ (NSString *)removeStartWithNSString:(NSString *)str
                         withNSString:(NSString *)remove;

+ (NSString *)removeStartIgnoreCaseWithNSString:(NSString *)str
                                   withNSString:(NSString *)remove;

+ (NSString *)repeatWithChar:(jchar)ch
                     withInt:(jint)repeat;

+ (NSString *)repeatWithNSString:(NSString *)str
                         withInt:(jint)repeat;

+ (NSString *)repeatWithNSString:(NSString *)str
                    withNSString:(NSString *)separator
                         withInt:(jint)repeat;

+ (NSString *)replaceWithNSString:(NSString *)text
                     withNSString:(NSString *)searchString
                     withNSString:(NSString *)replacement;

+ (NSString *)replaceWithNSString:(NSString *)text
                     withNSString:(NSString *)searchString
                     withNSString:(NSString *)replacement
                          withInt:(jint)max;

+ (NSString *)replaceCharsWithNSString:(NSString *)str
                              withChar:(jchar)searchChar
                              withChar:(jchar)replaceChar;

+ (NSString *)replaceCharsWithNSString:(NSString *)str
                          withNSString:(NSString *)searchChars
                          withNSString:(NSString *)replaceChars;

+ (NSString *)replaceEachWithNSString:(NSString *)text
                    withNSStringArray:(IOSObjectArray *)searchList
                    withNSStringArray:(IOSObjectArray *)replacementList;

+ (NSString *)replaceEachRepeatedlyWithNSString:(NSString *)text
                              withNSStringArray:(IOSObjectArray *)searchList
                              withNSStringArray:(IOSObjectArray *)replacementList;

+ (NSString *)replaceOnceWithNSString:(NSString *)text
                         withNSString:(NSString *)searchString
                         withNSString:(NSString *)replacement;

+ (NSString *)replacePatternWithNSString:(NSString *)source
                            withNSString:(NSString *)regex
                            withNSString:(NSString *)replacement;

+ (NSString *)reverseWithNSString:(NSString *)str;

+ (NSString *)reverseDelimitedWithNSString:(NSString *)str
                                  withChar:(jchar)separatorChar;

+ (NSString *)rightWithNSString:(NSString *)str
                        withInt:(jint)len;

+ (NSString *)rightPadWithNSString:(NSString *)str
                           withInt:(jint)size;

+ (NSString *)rightPadWithNSString:(NSString *)str
                           withInt:(jint)size
                          withChar:(jchar)padChar;

+ (NSString *)rightPadWithNSString:(NSString *)str
                           withInt:(jint)size
                      withNSString:(NSString *)padStr;

+ (IOSObjectArray *)splitWithNSString:(NSString *)str;

+ (IOSObjectArray *)splitWithNSString:(NSString *)str
                             withChar:(jchar)separatorChar;

+ (IOSObjectArray *)splitWithNSString:(NSString *)str
                         withNSString:(NSString *)separatorChars;

+ (IOSObjectArray *)splitWithNSString:(NSString *)str
                         withNSString:(NSString *)separatorChars
                              withInt:(jint)max;

+ (IOSObjectArray *)splitByCharacterTypeWithNSString:(NSString *)str;

+ (IOSObjectArray *)splitByCharacterTypeCamelCaseWithNSString:(NSString *)str;

+ (IOSObjectArray *)splitByWholeSeparatorWithNSString:(NSString *)str
                                         withNSString:(NSString *)separator;

+ (IOSObjectArray *)splitByWholeSeparatorWithNSString:(NSString *)str
                                         withNSString:(NSString *)separator
                                              withInt:(jint)max;

+ (IOSObjectArray *)splitByWholeSeparatorPreserveAllTokensWithNSString:(NSString *)str
                                                          withNSString:(NSString *)separator;

+ (IOSObjectArray *)splitByWholeSeparatorPreserveAllTokensWithNSString:(NSString *)str
                                                          withNSString:(NSString *)separator
                                                               withInt:(jint)max;

+ (IOSObjectArray *)splitPreserveAllTokensWithNSString:(NSString *)str;

+ (IOSObjectArray *)splitPreserveAllTokensWithNSString:(NSString *)str
                                              withChar:(jchar)separatorChar;

+ (IOSObjectArray *)splitPreserveAllTokensWithNSString:(NSString *)str
                                          withNSString:(NSString *)separatorChars;

+ (IOSObjectArray *)splitPreserveAllTokensWithNSString:(NSString *)str
                                          withNSString:(NSString *)separatorChars
                                               withInt:(jint)max;

+ (jboolean)startsWithWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                      withJavaLangCharSequence:(id<JavaLangCharSequence>)prefix;

+ (jboolean)startsWithAnyWithJavaLangCharSequence:(id<JavaLangCharSequence>)string
                    withJavaLangCharSequenceArray:(IOSObjectArray *)searchStrings;

+ (jboolean)startsWithIgnoreCaseWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                                withJavaLangCharSequence:(id<JavaLangCharSequence>)prefix;

+ (NSString *)stripWithNSString:(NSString *)str;

+ (NSString *)stripWithNSString:(NSString *)str
                   withNSString:(NSString *)stripChars;

+ (NSString *)stripAccentsWithNSString:(NSString *)input;

+ (IOSObjectArray *)stripAllWithNSStringArray:(IOSObjectArray *)strs;

+ (IOSObjectArray *)stripAllWithNSStringArray:(IOSObjectArray *)strs
                                 withNSString:(NSString *)stripChars;

+ (NSString *)stripEndWithNSString:(NSString *)str
                      withNSString:(NSString *)stripChars;

+ (NSString *)stripStartWithNSString:(NSString *)str
                        withNSString:(NSString *)stripChars;

+ (NSString *)stripToEmptyWithNSString:(NSString *)str;

+ (NSString *)stripToNullWithNSString:(NSString *)str;

+ (NSString *)substringWithNSString:(NSString *)str
                            withInt:(jint)start;

+ (NSString *)substringWithNSString:(NSString *)str
                            withInt:(jint)start
                            withInt:(jint)end;

+ (NSString *)substringAfterWithNSString:(NSString *)str
                            withNSString:(NSString *)separator;

+ (NSString *)substringAfterLastWithNSString:(NSString *)str
                                withNSString:(NSString *)separator;

+ (NSString *)substringBeforeWithNSString:(NSString *)str
                             withNSString:(NSString *)separator;

+ (NSString *)substringBeforeLastWithNSString:(NSString *)str
                                 withNSString:(NSString *)separator;

+ (NSString *)substringBetweenWithNSString:(NSString *)str
                              withNSString:(NSString *)tag;

+ (NSString *)substringBetweenWithNSString:(NSString *)str
                              withNSString:(NSString *)open
                              withNSString:(NSString *)close;

+ (IOSObjectArray *)substringsBetweenWithNSString:(NSString *)str
                                     withNSString:(NSString *)open
                                     withNSString:(NSString *)close;

+ (NSString *)swapCaseWithNSString:(NSString *)str;

+ (NSString *)toEncodedStringWithByteArray:(IOSByteArray *)bytes
                 withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset;

+ (NSString *)toStringWithByteArray:(IOSByteArray *)bytes
                       withNSString:(NSString *)charsetName;

+ (NSString *)trimWithNSString:(NSString *)str;

+ (NSString *)trimToEmptyWithNSString:(NSString *)str;

+ (NSString *)trimToNullWithNSString:(NSString *)str;

+ (NSString *)uncapitalizeWithNSString:(NSString *)str;

+ (NSString *)upperCaseWithNSString:(NSString *)str;

+ (NSString *)upperCaseWithNSString:(NSString *)str
                 withJavaUtilLocale:(JavaUtilLocale *)locale;

+ (NSString *)wrapWithNSString:(NSString *)str
                      withChar:(jchar)wrapWith;

+ (NSString *)wrapWithNSString:(NSString *)str
                  withNSString:(NSString *)wrapWith;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3StringUtils)

inline NSString *OrgApacheCommonsLang3StringUtils_get_SPACE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_SPACE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3StringUtils, SPACE, NSString *)

inline NSString *OrgApacheCommonsLang3StringUtils_get_EMPTY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3StringUtils, EMPTY, NSString *)

inline NSString *OrgApacheCommonsLang3StringUtils_get_LF(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_LF;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3StringUtils, LF, NSString *)

inline NSString *OrgApacheCommonsLang3StringUtils_get_CR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_CR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3StringUtils, CR, NSString *)

inline jint OrgApacheCommonsLang3StringUtils_get_INDEX_NOT_FOUND(void);
#define OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND -1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3StringUtils, INDEX_NOT_FOUND, jint)

FOUNDATION_EXPORT void OrgApacheCommonsLang3StringUtils_init(OrgApacheCommonsLang3StringUtils *self);

FOUNDATION_EXPORT OrgApacheCommonsLang3StringUtils *new_OrgApacheCommonsLang3StringUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsLang3StringUtils *create_OrgApacheCommonsLang3StringUtils_init(void);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(id<JavaLangCharSequence> cs);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_isNotEmptyWithJavaLangCharSequence_(id<JavaLangCharSequence> cs);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_isAnyEmptyWithJavaLangCharSequenceArray_(IOSObjectArray *css);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_isNoneEmptyWithJavaLangCharSequenceArray_(IOSObjectArray *css);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_isBlankWithJavaLangCharSequence_(id<JavaLangCharSequence> cs);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_isNotBlankWithJavaLangCharSequence_(id<JavaLangCharSequence> cs);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_isAnyBlankWithJavaLangCharSequenceArray_(IOSObjectArray *css);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_isNoneBlankWithJavaLangCharSequenceArray_(IOSObjectArray *css);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_trimWithNSString_(NSString *str);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_trimToNullWithNSString_(NSString *str);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_trimToEmptyWithNSString_(NSString *str);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_stripWithNSString_(NSString *str);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_stripToNullWithNSString_(NSString *str);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_stripToEmptyWithNSString_(NSString *str);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_stripWithNSString_withNSString_(NSString *str, NSString *stripChars);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_stripStartWithNSString_withNSString_(NSString *str, NSString *stripChars);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_stripEndWithNSString_withNSString_(NSString *str, NSString *stripChars);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsLang3StringUtils_stripAllWithNSStringArray_(IOSObjectArray *strs);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsLang3StringUtils_stripAllWithNSStringArray_withNSString_(IOSObjectArray *strs, NSString *stripChars);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_stripAccentsWithNSString_(NSString *input);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_equalsWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> cs1, id<JavaLangCharSequence> cs2);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_equalsIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> str1, id<JavaLangCharSequence> str2);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3StringUtils_indexOfWithJavaLangCharSequence_withInt_(id<JavaLangCharSequence> seq, jint searchChar);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3StringUtils_indexOfWithJavaLangCharSequence_withInt_withInt_(id<JavaLangCharSequence> seq, jint searchChar, jint startPos);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3StringUtils_indexOfWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> seq, id<JavaLangCharSequence> searchSeq);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3StringUtils_indexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(id<JavaLangCharSequence> seq, id<JavaLangCharSequence> searchSeq, jint startPos);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3StringUtils_ordinalIndexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> searchStr, jint ordinal);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3StringUtils_indexOfIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> searchStr);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3StringUtils_indexOfIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> searchStr, jint startPos);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3StringUtils_lastIndexOfWithJavaLangCharSequence_withInt_(id<JavaLangCharSequence> seq, jint searchChar);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3StringUtils_lastIndexOfWithJavaLangCharSequence_withInt_withInt_(id<JavaLangCharSequence> seq, jint searchChar, jint startPos);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3StringUtils_lastIndexOfWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> seq, id<JavaLangCharSequence> searchSeq);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3StringUtils_lastOrdinalIndexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> searchStr, jint ordinal);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3StringUtils_lastIndexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(id<JavaLangCharSequence> seq, id<JavaLangCharSequence> searchSeq, jint startPos);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3StringUtils_lastIndexOfIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> searchStr);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3StringUtils_lastIndexOfIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> searchStr, jint startPos);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_containsWithJavaLangCharSequence_withInt_(id<JavaLangCharSequence> seq, jint searchChar);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_containsWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> seq, id<JavaLangCharSequence> searchSeq);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_containsIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> searchStr);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_containsWhitespaceWithJavaLangCharSequence_(id<JavaLangCharSequence> seq);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3StringUtils_indexOfAnyWithJavaLangCharSequence_withCharArray_(id<JavaLangCharSequence> cs, IOSCharArray *searchChars);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3StringUtils_indexOfAnyWithJavaLangCharSequence_withNSString_(id<JavaLangCharSequence> cs, NSString *searchChars);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_containsAnyWithJavaLangCharSequence_withCharArray_(id<JavaLangCharSequence> cs, IOSCharArray *searchChars);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_containsAnyWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> cs, id<JavaLangCharSequence> searchChars);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_containsAnyWithJavaLangCharSequence_withJavaLangCharSequenceArray_(id<JavaLangCharSequence> cs, IOSObjectArray *searchCharSequences);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3StringUtils_indexOfAnyButWithJavaLangCharSequence_withCharArray_(id<JavaLangCharSequence> cs, IOSCharArray *searchChars);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3StringUtils_indexOfAnyButWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> seq, id<JavaLangCharSequence> searchChars);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_containsOnlyWithJavaLangCharSequence_withCharArray_(id<JavaLangCharSequence> cs, IOSCharArray *valid);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_containsOnlyWithJavaLangCharSequence_withNSString_(id<JavaLangCharSequence> cs, NSString *validChars);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_containsNoneWithJavaLangCharSequence_withCharArray_(id<JavaLangCharSequence> cs, IOSCharArray *searchChars);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_containsNoneWithJavaLangCharSequence_withNSString_(id<JavaLangCharSequence> cs, NSString *invalidChars);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3StringUtils_indexOfAnyWithJavaLangCharSequence_withJavaLangCharSequenceArray_(id<JavaLangCharSequence> str, IOSObjectArray *searchStrs);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3StringUtils_lastIndexOfAnyWithJavaLangCharSequence_withJavaLangCharSequenceArray_(id<JavaLangCharSequence> str, IOSObjectArray *searchStrs);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_substringWithNSString_withInt_(NSString *str, jint start);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_substringWithNSString_withInt_withInt_(NSString *str, jint start, jint end);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_leftWithNSString_withInt_(NSString *str, jint len);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_rightWithNSString_withInt_(NSString *str, jint len);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_midWithNSString_withInt_withInt_(NSString *str, jint pos, jint len);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_substringBeforeWithNSString_withNSString_(NSString *str, NSString *separator);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_substringAfterWithNSString_withNSString_(NSString *str, NSString *separator);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_substringBeforeLastWithNSString_withNSString_(NSString *str, NSString *separator);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_substringAfterLastWithNSString_withNSString_(NSString *str, NSString *separator);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_substringBetweenWithNSString_withNSString_(NSString *str, NSString *tag);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_substringBetweenWithNSString_withNSString_withNSString_(NSString *str, NSString *open, NSString *close);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsLang3StringUtils_substringsBetweenWithNSString_withNSString_withNSString_(NSString *str, NSString *open, NSString *close);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitWithNSString_(NSString *str);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitWithNSString_withChar_(NSString *str, jchar separatorChar);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitWithNSString_withNSString_(NSString *str, NSString *separatorChars);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitWithNSString_withNSString_withInt_(NSString *str, NSString *separatorChars, jint max);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitByWholeSeparatorWithNSString_withNSString_(NSString *str, NSString *separator);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitByWholeSeparatorWithNSString_withNSString_withInt_(NSString *str, NSString *separator, jint max);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitByWholeSeparatorPreserveAllTokensWithNSString_withNSString_(NSString *str, NSString *separator);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitByWholeSeparatorPreserveAllTokensWithNSString_withNSString_withInt_(NSString *str, NSString *separator, jint max);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitPreserveAllTokensWithNSString_(NSString *str);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitPreserveAllTokensWithNSString_withChar_(NSString *str, jchar separatorChar);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitPreserveAllTokensWithNSString_withNSString_(NSString *str, NSString *separatorChars);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitPreserveAllTokensWithNSString_withNSString_withInt_(NSString *str, NSString *separatorChars, jint max);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitByCharacterTypeWithNSString_(NSString *str);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitByCharacterTypeCamelCaseWithNSString_(NSString *str);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_joinWithNSObjectArray_(IOSObjectArray *elements);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_joinWithNSObjectArray_withChar_(IOSObjectArray *array, jchar separator);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_joinWithLongArray_withChar_(IOSLongArray *array, jchar separator);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_joinWithIntArray_withChar_(IOSIntArray *array, jchar separator);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_joinWithShortArray_withChar_(IOSShortArray *array, jchar separator);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_joinWithByteArray_withChar_(IOSByteArray *array, jchar separator);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_joinWithCharArray_withChar_(IOSCharArray *array, jchar separator);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_joinWithFloatArray_withChar_(IOSFloatArray *array, jchar separator);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_joinWithDoubleArray_withChar_(IOSDoubleArray *array, jchar separator);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_joinWithNSObjectArray_withChar_withInt_withInt_(IOSObjectArray *array, jchar separator, jint startIndex, jint endIndex);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_joinWithLongArray_withChar_withInt_withInt_(IOSLongArray *array, jchar separator, jint startIndex, jint endIndex);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_joinWithIntArray_withChar_withInt_withInt_(IOSIntArray *array, jchar separator, jint startIndex, jint endIndex);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_joinWithByteArray_withChar_withInt_withInt_(IOSByteArray *array, jchar separator, jint startIndex, jint endIndex);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_joinWithShortArray_withChar_withInt_withInt_(IOSShortArray *array, jchar separator, jint startIndex, jint endIndex);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_joinWithCharArray_withChar_withInt_withInt_(IOSCharArray *array, jchar separator, jint startIndex, jint endIndex);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_joinWithDoubleArray_withChar_withInt_withInt_(IOSDoubleArray *array, jchar separator, jint startIndex, jint endIndex);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_joinWithFloatArray_withChar_withInt_withInt_(IOSFloatArray *array, jchar separator, jint startIndex, jint endIndex);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_joinWithNSObjectArray_withNSString_(IOSObjectArray *array, NSString *separator);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_joinWithNSObjectArray_withNSString_withInt_withInt_(IOSObjectArray *array, NSString *separator, jint startIndex, jint endIndex);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_joinWithJavaUtilIterator_withChar_(id<JavaUtilIterator> iterator, jchar separator);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_joinWithJavaUtilIterator_withNSString_(id<JavaUtilIterator> iterator, NSString *separator);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_joinWithJavaLangIterable_withChar_(id<JavaLangIterable> iterable, jchar separator);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_joinWithJavaLangIterable_withNSString_(id<JavaLangIterable> iterable, NSString *separator);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_deleteWhitespaceWithNSString_(NSString *str);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_removeStartWithNSString_withNSString_(NSString *str, NSString *remove);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_removeStartIgnoreCaseWithNSString_withNSString_(NSString *str, NSString *remove);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_removeEndWithNSString_withNSString_(NSString *str, NSString *remove);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_removeEndIgnoreCaseWithNSString_withNSString_(NSString *str, NSString *remove);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_removeWithNSString_withNSString_(NSString *str, NSString *remove);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_removeWithNSString_withChar_(NSString *str, jchar remove);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_replaceOnceWithNSString_withNSString_withNSString_(NSString *text, NSString *searchString, NSString *replacement);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_replacePatternWithNSString_withNSString_withNSString_(NSString *source, NSString *regex, NSString *replacement);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_removePatternWithNSString_withNSString_(NSString *source, NSString *regex);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_replaceWithNSString_withNSString_withNSString_(NSString *text, NSString *searchString, NSString *replacement);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_replaceWithNSString_withNSString_withNSString_withInt_(NSString *text, NSString *searchString, NSString *replacement, jint max);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_replaceEachWithNSString_withNSStringArray_withNSStringArray_(NSString *text, IOSObjectArray *searchList, IOSObjectArray *replacementList);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_replaceEachRepeatedlyWithNSString_withNSStringArray_withNSStringArray_(NSString *text, IOSObjectArray *searchList, IOSObjectArray *replacementList);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_replaceCharsWithNSString_withChar_withChar_(NSString *str, jchar searchChar, jchar replaceChar);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_replaceCharsWithNSString_withNSString_withNSString_(NSString *str, NSString *searchChars, NSString *replaceChars);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_overlayWithNSString_withNSString_withInt_withInt_(NSString *str, NSString *overlay, jint start, jint end);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_chompWithNSString_(NSString *str);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_chompWithNSString_withNSString_(NSString *str, NSString *separator);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_chopWithNSString_(NSString *str);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_repeatWithNSString_withInt_(NSString *str, jint repeat);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_repeatWithNSString_withNSString_withInt_(NSString *str, NSString *separator, jint repeat);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_repeatWithChar_withInt_(jchar ch, jint repeat);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_rightPadWithNSString_withInt_(NSString *str, jint size);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_rightPadWithNSString_withInt_withChar_(NSString *str, jint size, jchar padChar);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_rightPadWithNSString_withInt_withNSString_(NSString *str, jint size, NSString *padStr);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_leftPadWithNSString_withInt_(NSString *str, jint size);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_leftPadWithNSString_withInt_withChar_(NSString *str, jint size, jchar padChar);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_leftPadWithNSString_withInt_withNSString_(NSString *str, jint size, NSString *padStr);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3StringUtils_lengthWithJavaLangCharSequence_(id<JavaLangCharSequence> cs);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_centerWithNSString_withInt_(NSString *str, jint size);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_centerWithNSString_withInt_withChar_(NSString *str, jint size, jchar padChar);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_centerWithNSString_withInt_withNSString_(NSString *str, jint size, NSString *padStr);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_upperCaseWithNSString_(NSString *str);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_upperCaseWithNSString_withJavaUtilLocale_(NSString *str, JavaUtilLocale *locale);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_lowerCaseWithNSString_(NSString *str);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_lowerCaseWithNSString_withJavaUtilLocale_(NSString *str, JavaUtilLocale *locale);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_capitalizeWithNSString_(NSString *str);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_uncapitalizeWithNSString_(NSString *str);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_swapCaseWithNSString_(NSString *str);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3StringUtils_countMatchesWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> sub);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3StringUtils_countMatchesWithJavaLangCharSequence_withChar_(id<JavaLangCharSequence> str, jchar ch);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_isAlphaWithJavaLangCharSequence_(id<JavaLangCharSequence> cs);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_isAlphaSpaceWithJavaLangCharSequence_(id<JavaLangCharSequence> cs);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_isAlphanumericWithJavaLangCharSequence_(id<JavaLangCharSequence> cs);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_isAlphanumericSpaceWithJavaLangCharSequence_(id<JavaLangCharSequence> cs);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_isAsciiPrintableWithJavaLangCharSequence_(id<JavaLangCharSequence> cs);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_isNumericWithJavaLangCharSequence_(id<JavaLangCharSequence> cs);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_isNumericSpaceWithJavaLangCharSequence_(id<JavaLangCharSequence> cs);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_isWhitespaceWithJavaLangCharSequence_(id<JavaLangCharSequence> cs);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_isAllLowerCaseWithJavaLangCharSequence_(id<JavaLangCharSequence> cs);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_isAllUpperCaseWithJavaLangCharSequence_(id<JavaLangCharSequence> cs);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_defaultStringWithNSString_(NSString *str);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_defaultStringWithNSString_withNSString_(NSString *str, NSString *defaultStr);

FOUNDATION_EXPORT id<JavaLangCharSequence> OrgApacheCommonsLang3StringUtils_defaultIfBlankWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> defaultStr);

FOUNDATION_EXPORT id<JavaLangCharSequence> OrgApacheCommonsLang3StringUtils_defaultIfEmptyWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> defaultStr);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_reverseWithNSString_(NSString *str);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_reverseDelimitedWithNSString_withChar_(NSString *str, jchar separatorChar);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_abbreviateWithNSString_withInt_(NSString *str, jint maxWidth);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_abbreviateWithNSString_withInt_withInt_(NSString *str, jint offset, jint maxWidth);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_abbreviateMiddleWithNSString_withNSString_withInt_(NSString *str, NSString *middle, jint length);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_differenceWithNSString_withNSString_(NSString *str1, NSString *str2);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3StringUtils_indexOfDifferenceWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> cs1, id<JavaLangCharSequence> cs2);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3StringUtils_indexOfDifferenceWithJavaLangCharSequenceArray_(IOSObjectArray *css);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_getCommonPrefixWithNSStringArray_(IOSObjectArray *strs);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3StringUtils_getLevenshteinDistanceWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> s, id<JavaLangCharSequence> t);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3StringUtils_getLevenshteinDistanceWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(id<JavaLangCharSequence> s, id<JavaLangCharSequence> t, jint threshold);

FOUNDATION_EXPORT jdouble OrgApacheCommonsLang3StringUtils_getJaroWinklerDistanceWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> first, id<JavaLangCharSequence> second);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3StringUtils_getFuzzyDistanceWithJavaLangCharSequence_withJavaLangCharSequence_withJavaUtilLocale_(id<JavaLangCharSequence> term, id<JavaLangCharSequence> query, JavaUtilLocale *locale);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_startsWithWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> prefix);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_startsWithIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> prefix);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_startsWithAnyWithJavaLangCharSequence_withJavaLangCharSequenceArray_(id<JavaLangCharSequence> string, IOSObjectArray *searchStrings);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_endsWithWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> suffix);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_endsWithIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> suffix);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_normalizeSpaceWithNSString_(NSString *str);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3StringUtils_endsWithAnyWithJavaLangCharSequence_withJavaLangCharSequenceArray_(id<JavaLangCharSequence> string, IOSObjectArray *searchStrings);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_appendIfMissingWithNSString_withJavaLangCharSequence_withJavaLangCharSequenceArray_(NSString *str, id<JavaLangCharSequence> suffix, IOSObjectArray *suffixes);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_appendIfMissingIgnoreCaseWithNSString_withJavaLangCharSequence_withJavaLangCharSequenceArray_(NSString *str, id<JavaLangCharSequence> suffix, IOSObjectArray *suffixes);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_prependIfMissingWithNSString_withJavaLangCharSequence_withJavaLangCharSequenceArray_(NSString *str, id<JavaLangCharSequence> prefix, IOSObjectArray *prefixes);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_prependIfMissingIgnoreCaseWithNSString_withJavaLangCharSequence_withJavaLangCharSequenceArray_(NSString *str, id<JavaLangCharSequence> prefix, IOSObjectArray *prefixes);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_toStringWithByteArray_withNSString_(IOSByteArray *bytes, NSString *charsetName);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_toEncodedStringWithByteArray_withJavaNioCharsetCharset_(IOSByteArray *bytes, JavaNioCharsetCharset *charset);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_wrapWithNSString_withChar_(NSString *str, jchar wrapWith);

FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3StringUtils_wrapWithNSString_withNSString_(NSString *str, NSString *wrapWith);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3StringUtils)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsLang3StringUtils")
