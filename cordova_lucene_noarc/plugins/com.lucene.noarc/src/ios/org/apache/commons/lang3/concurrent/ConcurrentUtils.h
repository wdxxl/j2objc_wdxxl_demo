//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/concurrent/ConcurrentUtils.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentConcurrentUtils")
#ifdef RESTRICT_OrgApacheCommonsLang3ConcurrentConcurrentUtils
#define INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentConcurrentUtils 0
#else
#define INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentConcurrentUtils 1
#endif
#undef RESTRICT_OrgApacheCommonsLang3ConcurrentConcurrentUtils

#if !defined (OrgApacheCommonsLang3ConcurrentConcurrentUtils_) && (INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentConcurrentUtils || defined(INCLUDE_OrgApacheCommonsLang3ConcurrentConcurrentUtils))
#define OrgApacheCommonsLang3ConcurrentConcurrentUtils_

@class JavaLangThrowable;
@class JavaUtilConcurrentExecutionException;
@class OrgApacheCommonsLang3ConcurrentConcurrentException;
@class OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException;
@protocol JavaUtilConcurrentConcurrentMap;
@protocol JavaUtilConcurrentFuture;
@protocol OrgApacheCommonsLang3ConcurrentConcurrentInitializer;

@interface OrgApacheCommonsLang3ConcurrentConcurrentUtils : NSObject

#pragma mark Public

+ (id<JavaUtilConcurrentFuture>)constantFutureWithId:(id)value;

+ (id)createIfAbsentWithJavaUtilConcurrentConcurrentMap:(id<JavaUtilConcurrentConcurrentMap>)map
                                                 withId:(id)key
withOrgApacheCommonsLang3ConcurrentConcurrentInitializer:(id<OrgApacheCommonsLang3ConcurrentConcurrentInitializer>)init_;

+ (id)createIfAbsentUncheckedWithJavaUtilConcurrentConcurrentMap:(id<JavaUtilConcurrentConcurrentMap>)map
                                                          withId:(id)key
        withOrgApacheCommonsLang3ConcurrentConcurrentInitializer:(id<OrgApacheCommonsLang3ConcurrentConcurrentInitializer>)init_;

+ (OrgApacheCommonsLang3ConcurrentConcurrentException *)extractCauseWithJavaUtilConcurrentExecutionException:(JavaUtilConcurrentExecutionException *)ex;

+ (OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException *)extractCauseUncheckedWithJavaUtilConcurrentExecutionException:(JavaUtilConcurrentExecutionException *)ex;

+ (void)handleCauseWithJavaUtilConcurrentExecutionException:(JavaUtilConcurrentExecutionException *)ex;

+ (void)handleCauseUncheckedWithJavaUtilConcurrentExecutionException:(JavaUtilConcurrentExecutionException *)ex;

+ (id)initialize__WithOrgApacheCommonsLang3ConcurrentConcurrentInitializer:(id<OrgApacheCommonsLang3ConcurrentConcurrentInitializer>)initializer OBJC_METHOD_FAMILY_NONE;

+ (id)initializeUncheckedWithOrgApacheCommonsLang3ConcurrentConcurrentInitializer:(id<OrgApacheCommonsLang3ConcurrentConcurrentInitializer>)initializer OBJC_METHOD_FAMILY_NONE;

+ (id)putIfAbsentWithJavaUtilConcurrentConcurrentMap:(id<JavaUtilConcurrentConcurrentMap>)map
                                              withId:(id)key
                                              withId:(id)value;

#pragma mark Package-Private

+ (JavaLangThrowable *)checkedExceptionWithJavaLangThrowable:(JavaLangThrowable *)ex;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3ConcurrentConcurrentUtils)

FOUNDATION_EXPORT OrgApacheCommonsLang3ConcurrentConcurrentException *OrgApacheCommonsLang3ConcurrentConcurrentUtils_extractCauseWithJavaUtilConcurrentExecutionException_(JavaUtilConcurrentExecutionException *ex);

FOUNDATION_EXPORT OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException *OrgApacheCommonsLang3ConcurrentConcurrentUtils_extractCauseUncheckedWithJavaUtilConcurrentExecutionException_(JavaUtilConcurrentExecutionException *ex);

FOUNDATION_EXPORT void OrgApacheCommonsLang3ConcurrentConcurrentUtils_handleCauseWithJavaUtilConcurrentExecutionException_(JavaUtilConcurrentExecutionException *ex);

FOUNDATION_EXPORT void OrgApacheCommonsLang3ConcurrentConcurrentUtils_handleCauseUncheckedWithJavaUtilConcurrentExecutionException_(JavaUtilConcurrentExecutionException *ex);

FOUNDATION_EXPORT JavaLangThrowable *OrgApacheCommonsLang3ConcurrentConcurrentUtils_checkedExceptionWithJavaLangThrowable_(JavaLangThrowable *ex);

FOUNDATION_EXPORT id OrgApacheCommonsLang3ConcurrentConcurrentUtils_initialize__WithOrgApacheCommonsLang3ConcurrentConcurrentInitializer_(id<OrgApacheCommonsLang3ConcurrentConcurrentInitializer> initializer);

FOUNDATION_EXPORT id OrgApacheCommonsLang3ConcurrentConcurrentUtils_initializeUncheckedWithOrgApacheCommonsLang3ConcurrentConcurrentInitializer_(id<OrgApacheCommonsLang3ConcurrentConcurrentInitializer> initializer);

FOUNDATION_EXPORT id OrgApacheCommonsLang3ConcurrentConcurrentUtils_putIfAbsentWithJavaUtilConcurrentConcurrentMap_withId_withId_(id<JavaUtilConcurrentConcurrentMap> map, id key, id value);

FOUNDATION_EXPORT id OrgApacheCommonsLang3ConcurrentConcurrentUtils_createIfAbsentWithJavaUtilConcurrentConcurrentMap_withId_withOrgApacheCommonsLang3ConcurrentConcurrentInitializer_(id<JavaUtilConcurrentConcurrentMap> map, id key, id<OrgApacheCommonsLang3ConcurrentConcurrentInitializer> init_);

FOUNDATION_EXPORT id OrgApacheCommonsLang3ConcurrentConcurrentUtils_createIfAbsentUncheckedWithJavaUtilConcurrentConcurrentMap_withId_withOrgApacheCommonsLang3ConcurrentConcurrentInitializer_(id<JavaUtilConcurrentConcurrentMap> map, id key, id<OrgApacheCommonsLang3ConcurrentConcurrentInitializer> init_);

FOUNDATION_EXPORT id<JavaUtilConcurrentFuture> OrgApacheCommonsLang3ConcurrentConcurrentUtils_constantFutureWithId_(id value);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3ConcurrentConcurrentUtils)

#endif

#if !defined (OrgApacheCommonsLang3ConcurrentConcurrentUtils_ConstantFuture_) && (INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentConcurrentUtils || defined(INCLUDE_OrgApacheCommonsLang3ConcurrentConcurrentUtils_ConstantFuture))
#define OrgApacheCommonsLang3ConcurrentConcurrentUtils_ConstantFuture_

#define RESTRICT_JavaUtilConcurrentFuture 1
#define INCLUDE_JavaUtilConcurrentFuture 1
#include "java/util/concurrent/Future.h"

@class JavaUtilConcurrentTimeUnit;

@interface OrgApacheCommonsLang3ConcurrentConcurrentUtils_ConstantFuture : NSObject < JavaUtilConcurrentFuture >

#pragma mark Public

- (jboolean)cancelWithBoolean:(jboolean)mayInterruptIfRunning;

- (id)get;

- (id)getWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (jboolean)isCancelled;

- (jboolean)isDone;

#pragma mark Package-Private

- (instancetype)initWithId:(id)value;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3ConcurrentConcurrentUtils_ConstantFuture)

FOUNDATION_EXPORT void OrgApacheCommonsLang3ConcurrentConcurrentUtils_ConstantFuture_initWithId_(OrgApacheCommonsLang3ConcurrentConcurrentUtils_ConstantFuture *self, id value);

FOUNDATION_EXPORT OrgApacheCommonsLang3ConcurrentConcurrentUtils_ConstantFuture *new_OrgApacheCommonsLang3ConcurrentConcurrentUtils_ConstantFuture_initWithId_(id value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsLang3ConcurrentConcurrentUtils_ConstantFuture *create_OrgApacheCommonsLang3ConcurrentConcurrentUtils_ConstantFuture_initWithId_(id value);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3ConcurrentConcurrentUtils_ConstantFuture)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentConcurrentUtils")
