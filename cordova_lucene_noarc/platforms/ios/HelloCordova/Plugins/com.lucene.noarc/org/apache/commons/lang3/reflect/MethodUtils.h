//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/reflect/MethodUtils.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsLang3ReflectMethodUtils")
#ifdef RESTRICT_OrgApacheCommonsLang3ReflectMethodUtils
#define INCLUDE_ALL_OrgApacheCommonsLang3ReflectMethodUtils 0
#else
#define INCLUDE_ALL_OrgApacheCommonsLang3ReflectMethodUtils 1
#endif
#undef RESTRICT_OrgApacheCommonsLang3ReflectMethodUtils

#if !defined (OrgApacheCommonsLang3ReflectMethodUtils_) && (INCLUDE_ALL_OrgApacheCommonsLang3ReflectMethodUtils || defined(INCLUDE_OrgApacheCommonsLang3ReflectMethodUtils))
#define OrgApacheCommonsLang3ReflectMethodUtils_

@class IOSClass;
@class IOSObjectArray;
@class JavaLangReflectMethod;
@class OrgApacheCommonsLang3ClassUtils_Interfaces;
@protocol JavaUtilList;
@protocol JavaUtilSet;

@interface OrgApacheCommonsLang3ReflectMethodUtils : NSObject

#pragma mark Public

- (instancetype)init;

+ (JavaLangReflectMethod *)getAccessibleMethodWithIOSClass:(IOSClass *)cls
                                              withNSString:(NSString *)methodName
                                         withIOSClassArray:(IOSObjectArray *)parameterTypes;

+ (JavaLangReflectMethod *)getAccessibleMethodWithJavaLangReflectMethod:(JavaLangReflectMethod *)method;

+ (JavaLangReflectMethod *)getMatchingAccessibleMethodWithIOSClass:(IOSClass *)cls
                                                      withNSString:(NSString *)methodName
                                                 withIOSClassArray:(IOSObjectArray *)parameterTypes;

+ (id<JavaUtilList>)getMethodsListWithAnnotationWithIOSClass:(IOSClass *)cls
                                                withIOSClass:(IOSClass *)annotationCls;

+ (IOSObjectArray *)getMethodsWithAnnotationWithIOSClass:(IOSClass *)cls
                                            withIOSClass:(IOSClass *)annotationCls;

+ (id<JavaUtilSet>)getOverrideHierarchyWithJavaLangReflectMethod:(JavaLangReflectMethod *)method
                  withOrgApacheCommonsLang3ClassUtils_Interfaces:(OrgApacheCommonsLang3ClassUtils_Interfaces *)interfacesBehavior;

+ (id)invokeExactMethodWithId:(id)object
                 withNSString:(NSString *)methodName;

+ (id)invokeExactMethodWithId:(id)object
                 withNSString:(NSString *)methodName
            withNSObjectArray:(IOSObjectArray *)args;

+ (id)invokeExactMethodWithId:(id)object
                 withNSString:(NSString *)methodName
            withNSObjectArray:(IOSObjectArray *)args
            withIOSClassArray:(IOSObjectArray *)parameterTypes;

+ (id)invokeExactStaticMethodWithIOSClass:(IOSClass *)cls
                             withNSString:(NSString *)methodName
                        withNSObjectArray:(IOSObjectArray *)args;

+ (id)invokeExactStaticMethodWithIOSClass:(IOSClass *)cls
                             withNSString:(NSString *)methodName
                        withNSObjectArray:(IOSObjectArray *)args
                        withIOSClassArray:(IOSObjectArray *)parameterTypes;

+ (id)invokeMethodWithId:(id)object
            withNSString:(NSString *)methodName;

+ (id)invokeMethodWithId:(id)object
            withNSString:(NSString *)methodName
       withNSObjectArray:(IOSObjectArray *)args;

+ (id)invokeMethodWithId:(id)object
            withNSString:(NSString *)methodName
       withNSObjectArray:(IOSObjectArray *)args
       withIOSClassArray:(IOSObjectArray *)parameterTypes;

+ (id)invokeStaticMethodWithIOSClass:(IOSClass *)cls
                        withNSString:(NSString *)methodName
                   withNSObjectArray:(IOSObjectArray *)args;

+ (id)invokeStaticMethodWithIOSClass:(IOSClass *)cls
                        withNSString:(NSString *)methodName
                   withNSObjectArray:(IOSObjectArray *)args
                   withIOSClassArray:(IOSObjectArray *)parameterTypes;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3ReflectMethodUtils)

FOUNDATION_EXPORT void OrgApacheCommonsLang3ReflectMethodUtils_init(OrgApacheCommonsLang3ReflectMethodUtils *self);

FOUNDATION_EXPORT OrgApacheCommonsLang3ReflectMethodUtils *new_OrgApacheCommonsLang3ReflectMethodUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsLang3ReflectMethodUtils *create_OrgApacheCommonsLang3ReflectMethodUtils_init(void);

FOUNDATION_EXPORT id OrgApacheCommonsLang3ReflectMethodUtils_invokeMethodWithId_withNSString_(id object, NSString *methodName);

FOUNDATION_EXPORT id OrgApacheCommonsLang3ReflectMethodUtils_invokeMethodWithId_withNSString_withNSObjectArray_(id object, NSString *methodName, IOSObjectArray *args);

FOUNDATION_EXPORT id OrgApacheCommonsLang3ReflectMethodUtils_invokeMethodWithId_withNSString_withNSObjectArray_withIOSClassArray_(id object, NSString *methodName, IOSObjectArray *args, IOSObjectArray *parameterTypes);

FOUNDATION_EXPORT id OrgApacheCommonsLang3ReflectMethodUtils_invokeExactMethodWithId_withNSString_(id object, NSString *methodName);

FOUNDATION_EXPORT id OrgApacheCommonsLang3ReflectMethodUtils_invokeExactMethodWithId_withNSString_withNSObjectArray_(id object, NSString *methodName, IOSObjectArray *args);

FOUNDATION_EXPORT id OrgApacheCommonsLang3ReflectMethodUtils_invokeExactMethodWithId_withNSString_withNSObjectArray_withIOSClassArray_(id object, NSString *methodName, IOSObjectArray *args, IOSObjectArray *parameterTypes);

FOUNDATION_EXPORT id OrgApacheCommonsLang3ReflectMethodUtils_invokeExactStaticMethodWithIOSClass_withNSString_withNSObjectArray_withIOSClassArray_(IOSClass *cls, NSString *methodName, IOSObjectArray *args, IOSObjectArray *parameterTypes);

FOUNDATION_EXPORT id OrgApacheCommonsLang3ReflectMethodUtils_invokeStaticMethodWithIOSClass_withNSString_withNSObjectArray_(IOSClass *cls, NSString *methodName, IOSObjectArray *args);

FOUNDATION_EXPORT id OrgApacheCommonsLang3ReflectMethodUtils_invokeStaticMethodWithIOSClass_withNSString_withNSObjectArray_withIOSClassArray_(IOSClass *cls, NSString *methodName, IOSObjectArray *args, IOSObjectArray *parameterTypes);

FOUNDATION_EXPORT id OrgApacheCommonsLang3ReflectMethodUtils_invokeExactStaticMethodWithIOSClass_withNSString_withNSObjectArray_(IOSClass *cls, NSString *methodName, IOSObjectArray *args);

FOUNDATION_EXPORT JavaLangReflectMethod *OrgApacheCommonsLang3ReflectMethodUtils_getAccessibleMethodWithIOSClass_withNSString_withIOSClassArray_(IOSClass *cls, NSString *methodName, IOSObjectArray *parameterTypes);

FOUNDATION_EXPORT JavaLangReflectMethod *OrgApacheCommonsLang3ReflectMethodUtils_getAccessibleMethodWithJavaLangReflectMethod_(JavaLangReflectMethod *method);

FOUNDATION_EXPORT JavaLangReflectMethod *OrgApacheCommonsLang3ReflectMethodUtils_getMatchingAccessibleMethodWithIOSClass_withNSString_withIOSClassArray_(IOSClass *cls, NSString *methodName, IOSObjectArray *parameterTypes);

FOUNDATION_EXPORT id<JavaUtilSet> OrgApacheCommonsLang3ReflectMethodUtils_getOverrideHierarchyWithJavaLangReflectMethod_withOrgApacheCommonsLang3ClassUtils_Interfaces_(JavaLangReflectMethod *method, OrgApacheCommonsLang3ClassUtils_Interfaces *interfacesBehavior);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsLang3ReflectMethodUtils_getMethodsWithAnnotationWithIOSClass_withIOSClass_(IOSClass *cls, IOSClass *annotationCls);

FOUNDATION_EXPORT id<JavaUtilList> OrgApacheCommonsLang3ReflectMethodUtils_getMethodsListWithAnnotationWithIOSClass_withIOSClass_(IOSClass *cls, IOSClass *annotationCls);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3ReflectMethodUtils)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsLang3ReflectMethodUtils")
