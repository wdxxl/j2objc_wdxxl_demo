//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: WeakHashMapDemo.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "WeakHashMapDemo.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/WeakHashMap.h"

@implementation WeakHashMapDemo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  WeakHashMapDemo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  WeakHashMapDemo_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "main", "[LNSString;" };
  static const J2ObjcClassInfo _WeakHashMapDemo = { "WeakHashMapDemo", NULL, ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_WeakHashMapDemo;
}

@end

void WeakHashMapDemo_init(WeakHashMapDemo *self) {
  NSObject_init(self);
}

WeakHashMapDemo *new_WeakHashMapDemo_init() {
  J2OBJC_NEW_IMPL(WeakHashMapDemo, init)
}

WeakHashMapDemo *create_WeakHashMapDemo_init() {
  J2OBJC_CREATE_IMPL(WeakHashMapDemo, init)
}

void WeakHashMapDemo_mainWithNSStringArray_(IOSObjectArray *args) {
  WeakHashMapDemo_initialize();
  NSString *a = @"a";
  NSString *b = @"b";
  NSString *c = @"c";
  id<JavaUtilMap> weakmap = create_JavaUtilWeakHashMap_init();
  id<JavaUtilMap> map = create_JavaUtilHashMap_init();
  [map putWithId:a withId:@"aaa"];
  [map putWithId:b withId:@"bbb"];
  [weakmap putWithId:a withId:@"aaa"];
  [weakmap putWithId:b withId:@"bbb"];
  [weakmap putWithId:c withId:@"ccc"];
  [map removeWithId:a];
  a = nil;
  b = nil;
  JavaLangSystem_gc();
  id<JavaUtilIterator> i = [((id<JavaUtilSet>) nil_chk([map entrySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    id<JavaUtilMap_Entry> en = (id<JavaUtilMap_Entry>) cast_check([i next], JavaUtilMap_Entry_class_());
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@C@", @"map:", [((id<JavaUtilMap_Entry>) nil_chk(en)) getKey], ':', [en getValue])];
  }
  id<JavaUtilIterator> j = [((id<JavaUtilSet>) nil_chk([weakmap entrySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(j)) hasNext]) {
    id<JavaUtilMap_Entry> en = (id<JavaUtilMap_Entry>) cast_check([j next], JavaUtilMap_Entry_class_());
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@C@", @"weakmap:", [((id<JavaUtilMap_Entry>) nil_chk(en)) getKey], ':', [en getValue])];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(WeakHashMapDemo)
