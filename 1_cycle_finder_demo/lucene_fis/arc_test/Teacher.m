//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: Teacher.java
//

#include "J2ObjC_source.h"
#include "Teacher.h"
#include "java/util/Map.h"

@interface Teacher () {
 @public
  NSString *name_;
  id<JavaUtilMap> students_;
}

@end

J2OBJC_FIELD_SETTER(Teacher, name_, NSString *)
J2OBJC_FIELD_SETTER(Teacher, students_, id<JavaUtilMap>)

@implementation Teacher

- (instancetype)initWithNSString:(NSString *)name {
  Teacher_initWithNSString_(self, name);
  return self;
}

- (id<JavaUtilMap>)getStudents {
  return students_;
}

- (void)setStudentsWithJavaUtilMap:(id<JavaUtilMap>)students {
  self->students_ = students;
}

- (NSString *)description {
  return JreStrcat("$$C", @"Teacher [name=", name_, ']');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(getStudents);
  methods[2].selector = @selector(setStudentsWithJavaUtilMap:);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "students_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "()Ljava/util/Map<Ljava/lang/String;LStudent;>;", "setStudents", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;LStudent;>;)V", "toString", "Ljava/util/Map<Ljava/lang/String;LStudent;>;" };
  static const J2ObjcClassInfo _Teacher = { "Teacher", NULL, ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_Teacher;
}

@end

void Teacher_initWithNSString_(Teacher *self, NSString *name) {
  NSObject_init(self);
  self->name_ = name;
}

Teacher *new_Teacher_initWithNSString_(NSString *name) {
  J2OBJC_NEW_IMPL(Teacher, initWithNSString_, name)
}

Teacher *create_Teacher_initWithNSString_(NSString *name) {
  J2OBJC_CREATE_IMPL(Teacher, initWithNSString_, name)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Teacher)
