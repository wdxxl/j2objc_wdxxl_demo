//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: TestFunction.java
//

#include "J2ObjC_source.h"
#include "Student.h"
#include "Teacher.h"
#include "TestFunction.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@implementation TestFunction

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  TestFunction_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)main {
  TestFunction_main();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(main);
  #pragma clang diagnostic pop
  static const J2ObjcClassInfo _TestFunction = { "TestFunction", NULL, NULL, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_TestFunction;
}

@end

void TestFunction_init(TestFunction *self) {
  NSObject_init(self);
}

TestFunction *new_TestFunction_init() {
  J2OBJC_NEW_IMPL(TestFunction, init)
}

TestFunction *create_TestFunction_init() {
  J2OBJC_CREATE_IMPL(TestFunction, init)
}

void TestFunction_main() {
  TestFunction_initialize();
  Student *st1 = new_Student_initWithNSString_(@"st1");
  Student *st2 = new_Student_initWithNSString_(@"st2");
  Student *st3 = new_Student_initWithNSString_(@"st3");
  Teacher *tech1 = new_Teacher_initWithNSString_(@"tech1");
  Teacher *tech2 = new_Teacher_initWithNSString_(@"tech2");
  Teacher *tech3 = new_Teacher_initWithNSString_(@"tech3");
  id<JavaUtilMap> stdMap1 = new_JavaUtilHashMap_init();
  (void) [stdMap1 putWithId:@"st1_key" withId:st1];
  (void) [stdMap1 putWithId:@"st2_key" withId:st2];
  (void) [stdMap1 putWithId:@"st3_key" withId:st3];
  id<JavaUtilMap> stdMap2 = new_JavaUtilHashMap_init();
  (void) [stdMap2 putWithId:@"st2_key" withId:st2];
  (void) [stdMap2 putWithId:@"st3_key" withId:st3];
  id<JavaUtilMap> stdMap3 = new_JavaUtilHashMap_init();
  (void) [stdMap3 putWithId:@"st3_key" withId:st3];
  [tech1 setStudentsWithJavaUtilMap:stdMap1];
  [tech2 setStudentsWithJavaUtilMap:stdMap2];
  [tech3 setStudentsWithJavaUtilMap:stdMap3];
  id<JavaUtilMap> teachMap1 = new_JavaUtilHashMap_init();
  (void) [teachMap1 putWithId:@"teach1_key" withId:tech1];
  id<JavaUtilMap> teachMap2 = new_JavaUtilHashMap_init();
  (void) [teachMap2 putWithId:@"teach1_key" withId:tech1];
  (void) [teachMap2 putWithId:@"teach2_key" withId:tech2];
  id<JavaUtilMap> teachMap3 = new_JavaUtilHashMap_init();
  (void) [teachMap1 putWithId:@"teach1_key" withId:tech1];
  [st1 setTeachersWithJavaUtilMap:teachMap1];
  [st2 setTeachersWithJavaUtilMap:teachMap2];
  [st3 setTeachersWithJavaUtilMap:teachMap3];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(TestFunction)
